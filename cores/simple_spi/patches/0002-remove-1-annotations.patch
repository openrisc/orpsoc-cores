From 483206b8eecbceb8f4304f1174d85fe1ebea849c Mon Sep 17 00:00:00 2001
From: Hans Baier <hansfbaier@googlemail.com>
Date: Thu, 17 Oct 2013 12:21:42 +0700
Subject: [PATCH 2/6] remove #1 annotations

---
 fifo4.v          |   22 +++++------
 simple_spi_top.v |  110 +++++++++++++++++++++++++++---------------------------
 2 files changed, 66 insertions(+), 66 deletions(-)

diff --git a/fifo4.v b/fifo4.v
index da1002d..a4bd76f 100644
--- a/fifo4.v
+++ b/fifo4.v
@@ -89,21 +89,21 @@ reg             gb;
 //
 
 always @(posedge clk or negedge rst)
-    if(!rst)    wp <= #1 2'h0;
+    if(!rst)    wp <= 2'h0;
     else
-    if(clr)     wp <= #1 2'h0;
+    if(clr)     wp <= 2'h0;
     else
-    if(we)      wp <= #1 wp_p1;
+    if(we)      wp <= wp_p1;
 
 assign wp_p1 = wp + 2'h1;
 assign wp_p2 = wp + 2'h2;
 
 always @(posedge clk or negedge rst)
-    if(!rst)    rp <= #1 2'h0;
+    if(!rst)    rp <= 2'h0;
     else
-    if(clr)     rp <= #1 2'h0;
+    if(clr)     rp <= 2'h0;
     else
-    if(re)      rp <= #1 rp_p1;
+    if(re)      rp <= rp_p1;
 
 assign rp_p1 = rp + 2'h1;
 
@@ -112,7 +112,7 @@ assign  dout = mem[ rp ];
 
 // Fifo Input
 always @(posedge clk)
-    if(we)    mem[ wp ] <= #1  din;
+    if(we)    mem[ wp ] <=  din;
 
 // Status
 assign empty = (wp == rp) & !gb;
@@ -120,12 +120,12 @@ assign full  = (wp == rp) &  gb;
 
 // Guard Bit ...
 always @(posedge clk)
-    if(!rst)               gb <= #1 1'b0;
+    if(!rst)               gb <= 1'b0;
     else
-    if(clr)                gb <= #1 1'b0;
+    if(clr)                gb <= 1'b0;
     else
-    if((wp_p1 == rp) & we) gb <= #1 1'b1;
+    if((wp_p1 == rp) & we) gb <= 1'b1;
     else
-    if(re)                 gb <= #1 1'b0;
+    if(re)                 gb <= 1'b0;
 
 endmodule
diff --git a/simple_spi_top.v b/simple_spi_top.v
index 6e60cd1..a2bf590 100644
--- a/simple_spi_top.v
+++ b/simple_spi_top.v
@@ -119,16 +119,16 @@ module simple_spi_top(
   always @(posedge clk_i or negedge rst_i)
     if (~rst_i)
       begin
-          spcr <= #1 8'h10;  // set master bit
-          sper <= #1 8'h00;
+          spcr <= 8'h10;  // set master bit
+          sper <= 8'h00;
       end
     else if (wb_wr)
       begin
         if (adr_i == 2'b00)
-          spcr <= #1 dat_i | 8'h10; // always set master bit
+          spcr <= dat_i | 8'h10; // always set master bit
 
         if (adr_i == 2'b11)
-          sper <= #1 dat_i;
+          sper <= dat_i;
       end
 
   // write fifo
@@ -138,10 +138,10 @@ module simple_spi_top(
   // dat_o
   always @(posedge clk_i)
     case(adr_i) // synopsys full_case parallel_case
-      2'b00: dat_o <= #1 spcr;
-      2'b01: dat_o <= #1 spsr;
-      2'b10: dat_o <= #1 rfdout;
-      2'b11: dat_o <= #1 sper;
+      2'b00: dat_o <= spcr;
+      2'b01: dat_o <= spsr;
+      2'b10: dat_o <= rfdout;
+      2'b11: dat_o <= sper;
     endcase
 
   // read fifo
@@ -150,9 +150,9 @@ module simple_spi_top(
   // ack_o
   always @(posedge clk_i or negedge rst_i)
     if (~rst_i)
-      ack_o <= #1 1'b0;
+      ack_o <= 1'b0;
     else
-      ack_o <= #1 wb_acc & !ack_o;
+      ack_o <= wb_acc & !ack_o;
 
   // decode Serial Peripheral Control Register
   wire       spie = spcr[7];   // Interrupt enable bit
@@ -175,16 +175,16 @@ module simple_spi_top(
   reg spif;
   always @(posedge clk_i)
     if (~spe)
-      spif <= #1 1'b0;
+      spif <= 1'b0;
     else
-      spif <= #1 (tirq | spif) & ~(wr_spsr & dat_i[7]);
+      spif <= (tirq | spif) & ~(wr_spsr & dat_i[7]);
 
   reg wcol;
   always @(posedge clk_i)
     if (~spe)
-      wcol <= #1 1'b0;
+      wcol <= 1'b0;
     else
-      wcol <= #1 (wfov | wcol) & ~(wr_spsr & dat_i[6]);
+      wcol <= (wfov | wcol) & ~(wr_spsr & dat_i[6]);
 
   assign spsr[7]   = spif;
   assign spsr[6]   = wcol;
@@ -197,7 +197,7 @@ module simple_spi_top(
 
   // generate IRQ output (inta_o)
   always @(posedge clk_i)
-    inta_o <= #1 spif & spie;
+    inta_o <= spif & spie;
 
   //
   // hookup read/write buffer fifo
@@ -230,21 +230,21 @@ module simple_spi_top(
   reg [11:0] clkcnt;
   always @(posedge clk_i)
     if(spe & (|clkcnt & |state))
-      clkcnt <= #1 clkcnt - 11'h1;
+      clkcnt <= clkcnt - 11'h1;
     else
       case (espr) // synopsys full_case parallel_case
-        4'b0000: clkcnt <= #1 12'h0;   // 2   -- original M68HC11 coding
-        4'b0001: clkcnt <= #1 12'h1;   // 4   -- original M68HC11 coding
-        4'b0010: clkcnt <= #1 12'h3;   // 16  -- original M68HC11 coding
-        4'b0011: clkcnt <= #1 12'hf;   // 32  -- original M68HC11 coding
-        4'b0100: clkcnt <= #1 12'h1f;  // 8
-        4'b0101: clkcnt <= #1 12'h7;   // 64
-        4'b0110: clkcnt <= #1 12'h3f;  // 128
-        4'b0111: clkcnt <= #1 12'h7f;  // 256
-        4'b1000: clkcnt <= #1 12'hff;  // 512
-        4'b1001: clkcnt <= #1 12'h1ff; // 1024
-        4'b1010: clkcnt <= #1 12'h3ff; // 2048
-        4'b1011: clkcnt <= #1 12'h7ff; // 4096
+        4'b0000: clkcnt <= 12'h0;   // 2   -- original M68HC11 coding
+        4'b0001: clkcnt <= 12'h1;   // 4   -- original M68HC11 coding
+        4'b0010: clkcnt <= 12'h3;   // 16  -- original M68HC11 coding
+        4'b0011: clkcnt <= 12'hf;   // 32  -- original M68HC11 coding
+        4'b0100: clkcnt <= 12'h1f;  // 8
+        4'b0101: clkcnt <= 12'h7;   // 64
+        4'b0110: clkcnt <= 12'h3f;  // 128
+        4'b0111: clkcnt <= 12'h7f;  // 256
+        4'b1000: clkcnt <= 12'hff;  // 512
+        4'b1001: clkcnt <= 12'h1ff; // 1024
+        4'b1010: clkcnt <= 12'h3ff; // 2048
+        4'b1011: clkcnt <= 12'h7ff; // 4096
       endcase
 
   // generate clock enable signal
@@ -254,54 +254,54 @@ module simple_spi_top(
   always @(posedge clk_i)
     if (~spe)
       begin
-          state <= #1 2'b00; // idle
-          bcnt  <= #1 3'h0;
-          treg  <= #1 8'h00;
-          wfre  <= #1 1'b0;
-          rfwe  <= #1 1'b0;
-          sck_o <= #1 1'b0;
+          state <= 2'b00; // idle
+          bcnt  <= 3'h0;
+          treg  <= 8'h00;
+          wfre  <= 1'b0;
+          rfwe  <= 1'b0;
+          sck_o <= 1'b0;
       end
     else
       begin
-         wfre <= #1 1'b0;
-         rfwe <= #1 1'b0;
+         wfre <= 1'b0;
+         rfwe <= 1'b0;
 
          case (state) //synopsys full_case parallel_case
            2'b00: // idle state
               begin
-                  bcnt  <= #1 3'h7;   // set transfer counter
-                  treg  <= #1 wfdout; // load transfer register
-                  sck_o <= #1 cpol;   // set sck
+                  bcnt  <= 3'h7;   // set transfer counter
+                  treg  <= wfdout; // load transfer register
+                  sck_o <= cpol;   // set sck
 
                   if (~wfempty) begin
-                    wfre  <= #1 1'b1;
-                    state <= #1 2'b01;
-                    if (cpha) sck_o <= #1 ~sck_o;
+                    wfre  <= 1'b1;
+                    state <= 2'b01;
+                    if (cpha) sck_o <= ~sck_o;
                   end
               end
 
            2'b01: // clock-phase2, next data
               if (ena) begin
-                sck_o   <= #1 ~sck_o;
-                state   <= #1 2'b11;
+                sck_o   <= ~sck_o;
+                state   <= 2'b11;
               end
 
            2'b11: // clock phase1
               if (ena) begin
-                treg <= #1 {treg[6:0], miso_i};
-                bcnt <= #1 bcnt -3'h1;
+                treg <= {treg[6:0], miso_i};
+                bcnt <= bcnt -3'h1;
 
                 if (~|bcnt) begin
-                  state <= #1 2'b00;
-                  sck_o <= #1 cpol;
-                  rfwe  <= #1 1'b1;
+                  state <= 2'b00;
+                  sck_o <= cpol;
+                  rfwe  <= 1'b1;
                 end else begin
-                  state <= #1 2'b01;
-                  sck_o <= #1 ~sck_o;
+                  state <= 2'b01;
+                  sck_o <= ~sck_o;
                 end
               end
 
-           2'b10: state <= #1 2'b00;
+           2'b10: state <= 2'b00;
          endcase
       end
 
@@ -312,12 +312,12 @@ module simple_spi_top(
   reg [1:0] tcnt; // transfer count
   always @(posedge clk_i)
     if (~spe)
-      tcnt <= #1 icnt;
+      tcnt <= icnt;
     else if (rfwe) // rfwe gets asserted when all bits have been transfered
       if (|tcnt)
-        tcnt <= #1 tcnt - 2'h1;
+        tcnt <= tcnt - 2'h1;
       else
-        tcnt <= #1 icnt;
+        tcnt <= icnt;
 
   assign tirq = ~|tcnt & rfwe;
 
-- 
1.7.9.5

