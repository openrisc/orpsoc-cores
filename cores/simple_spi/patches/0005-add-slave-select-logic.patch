From 30f861993e82d8c88e9f46f8da08bb52ef674f0c Mon Sep 17 00:00:00 2001
From: Hans Baier <hansfbaier@googlemail.com>
Date: Thu, 17 Oct 2013 14:11:39 +0700
Subject: [PATCH 5/6] add slave select logic

---
 simple_spi_top.v |   34 +++++++++++++++++++++++-----------
 1 file changed, 23 insertions(+), 11 deletions(-)

diff --git a/simple_spi_top.v b/simple_spi_top.v
index 0acfe4d..b035930 100644
--- a/simple_spi_top.v
+++ b/simple_spi_top.v
@@ -70,13 +70,15 @@
 `include "timescale.v"
 // synopsys translate_on
 
-module simple_spi_top(
+module simple_spi #(
+  parameter SS_WIDTH = 1
+)(
   // 8bit WISHBONE bus slave interface
   input  wire       clk_i,         // clock
   input  wire       rst_i,         // reset (synchronous active high)
   input  wire       cyc_i,         // cycle
   input  wire       stb_i,         // strobe
-  input  wire [1:0] adr_i,         // address
+  input  wire [2:0] adr_i,         // address
   input  wire       we_i,          // write enable
   input  wire [7:0] dat_i,         // data input
   output reg  [7:0] dat_o,         // data output
@@ -85,6 +87,7 @@ module simple_spi_top(
 
   // SPI port
   output reg        sck_o,         // serial clock output
+  output [SS_WIDTH-1:0] ss_o,      // slave select (active low)
   output wire       mosi_o,        // MasterOut SlaveIN
   input  wire       miso_i         // MasterIn SlaveOut
 );
@@ -96,6 +99,7 @@ module simple_spi_top(
   wire [7:0]          spsr;       // Serial Peripheral Status    Register ('HC11 naming)
   reg  [7:0]          sper;       // Serial Peripheral Extension Register
   reg  [7:0]          treg;       // Transmit Register
+  reg  [SS_WIDTH-1:0] ss_r;       // Slave Select Register
 
   // fifo signals
   wire [7:0] rfdout;
@@ -121,31 +125,39 @@ module simple_spi_top(
       begin
           spcr <= 8'h10;  // set master bit
           sper <= 8'h00;
+          ss_r <= 0;
       end
     else if (wb_wr)
       begin
-        if (adr_i == 2'b00)
+        if (adr_i == 3'b000)
           spcr <= dat_i | 8'h10; // always set master bit
 
-        if (adr_i == 2'b11)
+        if (adr_i == 3'b011)
           sper <= dat_i;
+
+		if (adr_i == 3'b100)
+          ss_r <= dat_i[SS_WIDTH-1:0];
       end
 
+  // slave select (active low)
+  assign ss_o = ~ss_r;
+
   // write fifo
-  assign wfwe = wb_acc & (adr_i == 2'b10) & ack_o &  we_i;
+  assign wfwe = wb_acc & (adr_i == 3'b010) & ack_o &  we_i;
   assign wfov = wfwe & wffull;
 
   // dat_o
   always @(posedge clk_i)
     case(adr_i) // synopsys full_case parallel_case
-      2'b00: dat_o <= spcr;
-      2'b01: dat_o <= spsr;
-      2'b10: dat_o <= rfdout;
-      2'b11: dat_o <= sper;
+       3'b000: dat_o <= spcr;
+       3'b001: dat_o <= spsr;
+       3'b010: dat_o <= rfdout;
+       3'b011: dat_o <= sper;
+       3'b100: dat_o <= {{ (8-SS_WIDTH){1'b0} }, ss_r};
     endcase
 
   // read fifo
-  assign rfre = wb_acc & (adr_i == 2'b10) & ack_o & ~we_i;
+  assign rfre = wb_acc & (adr_i == 3'b010) & ack_o & ~we_i;
 
   // ack_o
   always @(posedge clk_i)
@@ -170,7 +182,7 @@ module simple_spi_top(
   wire [3:0] espr = {spre, spr};
 
   // generate status register
-  wire wr_spsr = wb_wr & (adr_i == 2'b01);
+  wire wr_spsr = wb_wr & (adr_i == 3'b001);
 
   reg spif;
   always @(posedge clk_i)
-- 
1.7.9.5

