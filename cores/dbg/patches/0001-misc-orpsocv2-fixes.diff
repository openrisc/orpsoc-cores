Index: dbg/rtl/verilog/dbg_cpu.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_cpu.v
+++ dbg/rtl/verilog/dbg_cpu.v
@@ -276,12 +276,15 @@ begin
                           dr[31:0] <= input_data[31:0];
                           latch_data <= 1'b1;
                         end
-                      else
+                      else if (enable)
                         begin
                           dr[31:0] <=  {dr[30:0], 1'b0};
                           latch_data <=  1'b0;
                         end
                     end
+	default: begin
+	   
+	end
       endcase
     end
   else if (enable && (!addr_len_cnt_end))
@@ -303,7 +306,7 @@ begin
   else if (update_dr_i)
     cmd_cnt <= {`DBG_CPU_CMD_CNT_WIDTH{1'b0}};
   else if (cmd_cnt_en)
-    cmd_cnt <= cmd_cnt + 1'b1;
+    cmd_cnt <= cmd_cnt + 1;
 end
 
 
@@ -353,7 +356,7 @@ begin
   else if (update_dr_i)
     addr_len_cnt <= 6'h0;
   else if (addr_len_cnt_en)
-    addr_len_cnt <= addr_len_cnt + 1'b1;
+    addr_len_cnt <= addr_len_cnt + 1;
 end
 
 
@@ -377,11 +380,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    data_cnt <= {`DBG_CPU_DATA_CNT_WIDTH{1'b0}};
+    data_cnt <= {`DBG_CPU_DATA_CNT_WIDTH+1{1'b0}};
   else if (update_dr_i)
-    data_cnt <= {`DBG_CPU_DATA_CNT_WIDTH{1'b0}};
+    data_cnt <= {`DBG_CPU_DATA_CNT_WIDTH+1{1'b0}};
   else if (data_cnt_en)
-    data_cnt <= data_cnt + 1'b1;
+    data_cnt <= data_cnt + 1;
 end
 
 
@@ -390,9 +393,9 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    data_cnt_limit <= {`DBG_CPU_DATA_CNT_LIM_WIDTH{1'b0}};
+    data_cnt_limit <= {`DBG_CPU_DATA_CNT_LIM_WIDTH+1{1'b0}};
   else if (update_dr_i)
-    data_cnt_limit <= len + 1'b1;
+    data_cnt_limit <= len + 1;
 end
 
 
@@ -420,7 +423,7 @@ begin
   if (rst_i)
     crc_cnt <= {`DBG_CPU_CRC_CNT_WIDTH{1'b0}};
   else if(crc_cnt_en)
-    crc_cnt <= crc_cnt + 1'b1;
+    crc_cnt <= crc_cnt + 1;
   else if (update_dr_i)
     crc_cnt <= {`DBG_CPU_CRC_CNT_WIDTH{1'b0}};
 end
@@ -458,7 +461,7 @@ begin
   else if (update_dr_i)
     status_cnt <= {`DBG_CPU_STATUS_CNT_WIDTH{1'b0}};
   else if (status_cnt_en)
-    status_cnt <= status_cnt + 1'b1;
+    status_cnt <= status_cnt + 1;
 end
 
 
@@ -528,11 +531,11 @@ begin
   if (rst_i)
     len_var <= {1'b0, {`DBG_CPU_LEN_LEN{1'b0}}};
   else if(update_dr_i)
-    len_var <= len + 1'b1;
+    len_var <= len + 'd1;
   else if (start_rd_tck)
     begin
-      if (len_var > 'd4)
-        len_var <= len_var - 3'd4;
+      if (len_var > 4)
+        len_var <= len_var - 'd4;
       else
         len_var <= {1'b0, {`DBG_CPU_LEN_LEN{1'b0}}};
     end
@@ -567,7 +570,7 @@ begin
   if (rst_i)
     begin
       start_wr_tck <= 1'b0;
-      cpu_dat_tmp <= 32'h0;
+      cpu_dat_tmp <= 32'd0;
     end
   else if (curr_cmd_go && acc_type_write)
     begin
@@ -681,7 +684,9 @@ begin
   else if (set_addr_cpu && (!set_addr_cpu_q)) // Setting starting address
     cpu_addr_dsff <= adr;
   else if (cpu_ack_i && (!cpu_ack_q))
-    cpu_addr_dsff <= cpu_addr_dsff + 3'd4;
+    //cpu_addr_dsff <= cpu_addr_dsff + 3'd4;
+    // Increment by just 1, to allow block reading -- jb 090901
+    cpu_addr_dsff <=  cpu_addr_dsff + 'd1;
 end
 
 
Index: dbg/rtl/verilog/dbg_top.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_top.v
+++ dbg/rtl/verilog/dbg_top.v
@@ -392,7 +392,7 @@ begin
   if (rst_i)
     data_cnt <=  {`DBG_TOP_DATA_CNT{1'b0}};
   else if(shift_dr_i & (~data_cnt_end))
-    data_cnt <=  data_cnt + 1'b1;
+    data_cnt <=  data_cnt + 1;
   else if (update_dr_i)
     data_cnt <=  {`DBG_TOP_DATA_CNT{1'b0}};
 end
@@ -407,7 +407,7 @@ begin
   if (rst_i)
     crc_cnt <=  {`DBG_TOP_CRC_CNT{1'b0}};
   else if(shift_dr_i & data_cnt_end & (~crc_cnt_end) & module_select)
-    crc_cnt <=  crc_cnt + 1'b1;
+    crc_cnt <=  crc_cnt + 1;
   else if (update_dr_i)
     crc_cnt <=  {`DBG_TOP_CRC_CNT{1'b0}};
 end
@@ -430,7 +430,7 @@ begin
   if (rst_i)
     status_cnt <=  {`DBG_TOP_STATUS_CNT_WIDTH{1'b0}};
   else if(shift_dr_i & crc_cnt_end & (~status_cnt_end))
-    status_cnt <=  status_cnt + 1'b1;
+    status_cnt <=  status_cnt + 1;
   else if (update_dr_i)
     status_cnt <=  {`DBG_TOP_STATUS_CNT_WIDTH{1'b0}};
 end
@@ -451,7 +451,7 @@ begin
     module_select <=  1'b0;
 end
 
-
+/* verilator lint_off COMBDLY */
 always @ (module_id)
 begin
   `ifdef DBG_CPU0_SUPPORTED
@@ -478,7 +478,7 @@ begin
     default                          :   module_select_error <=  1'b1;
   endcase
 end
-
+/* verilator lint_on COMBDLY */
 
 assign module_latch_en = module_select & crc_cnt_end & (~crc_cnt_end_q);
 
@@ -498,7 +498,7 @@ assign data_shift_en = shift_dr_i & (~da
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    module_dr <=  `DBG_TOP_MODULE_DATA_LEN'h0;
+    module_dr <=  0;   
   else if (data_shift_en)
     module_dr[`DBG_TOP_MODULE_DATA_LEN -1:0] <=  {module_dr[`DBG_TOP_MODULE_DATA_LEN -2:0], tdi_i};
 end
@@ -580,6 +580,7 @@ begin
     `DBG_TOP_STATUS_CNT_WIDTH'd4  : begin
                         tdo_module_select = crc_out;
                       end
+     default : begin    tdo_module_select = 1'b0; end			//me added
   endcase
 end
 
Index: dbg/rtl/verilog/dbg_wb.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_wb.v
+++ dbg/rtl/verilog/dbg_wb.v
@@ -259,7 +259,7 @@ reg     [7:0] mem [0:3];
 reg     [2:0] mem_ptr_dsff;
 reg           wishbone_ce_csff;
 reg           mem_ptr_init;
-reg [`DBG_WB_CMD_LEN -1: 0] curr_cmd;
+reg [`DBG_WB_CMD_LEN_INT -1: 0] curr_cmd;
 wire          curr_cmd_go;
 reg           curr_cmd_go_q;
 wire          curr_cmd_wr_comm;
@@ -313,12 +313,18 @@ begin
     begin
       dr[`DBG_WB_ACC_TYPE_LEN + `DBG_WB_ADR_LEN + `DBG_WB_LEN_LEN -1:0] <=  {acc_type, adr, len};
     end
-  else if (acc_type_read && curr_cmd_go && crc_cnt_31)  // Latchind first data (from WB)
+  else if (acc_type_read && curr_cmd_go && crc_cnt_31 && !busy_tck)  // Latchind first data (from WB)
     begin
       dr[31:0] <=  input_data[31:0];
       latch_data <=  1'b1;
     end
-  else if (acc_type_read && curr_cmd_go && crc_cnt_end) // Latching data (from WB)
+  else if (acc_type_read && curr_cmd_go && crc_cnt_end && !busy_tck && wb_end_tck_q)  
+    begin
+       // Had to wait for data from WB.
+       dr[31:0] <=  input_data[31:0];
+       latch_data <=  1'b1;
+    end
+  else if (acc_type_read && curr_cmd_go && crc_cnt_end && !busy_tck) // Latching data (from WB)
     begin
       if (acc_type == `DBG_WB_READ8)
         begin
@@ -334,7 +340,8 @@ begin
             end
           else
             begin
-              dr[31:24] <=  {dr[30:24], 1'b0};
+	       if (enable) // jb
+		 dr[31:24] <=  {dr[30:24], 1'b0};
               latch_data <=  1'b0;
             end
         end
@@ -350,7 +357,8 @@ begin
             end
           else
             begin
-              dr[31:16] <=  {dr[30:16], 1'b0};
+	       if (enable) // jb
+		 dr[31:16] <=  {dr[30:16], 1'b0};
               latch_data <=  1'b0;
             end
         end
@@ -363,7 +371,8 @@ begin
             end
           else
             begin
-              dr[31:0] <=  {dr[30:0], 1'b0};
+	       if (enable) // jb
+		 dr[31:0] <=  {dr[30:0], 1'b0};
               latch_data <=  1'b0;
             end
         end
@@ -387,7 +396,7 @@ begin
   else if (update_dr_i)
     cmd_cnt <=  {`DBG_WB_CMD_CNT_WIDTH{1'b0}};
   else if (cmd_cnt_en)
-    cmd_cnt <=  cmd_cnt + 1'b1;
+    cmd_cnt <=  cmd_cnt + `DBG_WB_CMD_CNT_WIDTH'd1;
 end
 
 
@@ -395,11 +404,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    curr_cmd <=  {`DBG_WB_CMD_LEN{1'b0}};
+    curr_cmd <=  {`DBG_WB_CMD_LEN_INT{1'b0}};
   else if (update_dr_i)
-    curr_cmd <=  {`DBG_WB_CMD_LEN{1'b0}};
-  else if (cmd_cnt == (`DBG_WB_CMD_LEN -1))
-    curr_cmd <=  {dr[`DBG_WB_CMD_LEN-2 :0], tdi_i};
+    curr_cmd <=  {`DBG_WB_CMD_LEN_INT{1'b0}};
+  else if (cmd_cnt == (`DBG_WB_CMD_LEN_INT -1))
+    curr_cmd <=  {dr[`DBG_WB_CMD_LEN_INT-2 :0], tdi_i};
 end
 
 
@@ -433,11 +442,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    addr_len_cnt <=  6'h0;
+    addr_len_cnt <=  6'd0;
   else if (update_dr_i)
-    addr_len_cnt <=  6'h0;
+    addr_len_cnt <=  6'd0;
   else if (addr_len_cnt_en)
-    addr_len_cnt <=  addr_len_cnt + 1'b1;
+    addr_len_cnt <=  addr_len_cnt + 6'd1;
 end
 
 
@@ -461,11 +470,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    data_cnt <=  {`DBG_WB_DATA_CNT_WIDTH{1'b0}};
+    data_cnt <=  {`DBG_WB_DATA_CNT_WIDTH+1{1'b0}};
   else if (update_dr_i)
-    data_cnt <=  {`DBG_WB_DATA_CNT_WIDTH{1'b0}};
+    data_cnt <=  {`DBG_WB_DATA_CNT_WIDTH+1{1'b0}};
   else if (data_cnt_en)
-    data_cnt <=  data_cnt + 1'b1;
+    data_cnt <=  data_cnt + 1;
 end
 
 
@@ -474,9 +483,9 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    data_cnt_limit <=  {`DBG_WB_DATA_CNT_LIM_WIDTH{1'b0}};
+    data_cnt_limit <=  {`DBG_WB_DATA_CNT_LIM_WIDTH+1{1'b0}};
   else if (update_dr_i)
-    data_cnt_limit <=  len + 1'b1;
+    data_cnt_limit <=  len + 1;
 end
 
 
@@ -504,7 +513,7 @@ begin
   if (rst_i)
     crc_cnt <=  {`DBG_WB_CRC_CNT_WIDTH{1'b0}};
   else if(crc_cnt_en)
-    crc_cnt <=  crc_cnt + 1'b1;
+    crc_cnt <=  crc_cnt + 1;
   else if (update_dr_i)
     crc_cnt <=  {`DBG_WB_CRC_CNT_WIDTH{1'b0}};
 end
@@ -542,7 +551,7 @@ begin
   else if (update_dr_i)
     status_cnt <=  {`DBG_WB_STATUS_CNT_WIDTH{1'b0}};
   else if (status_cnt_en)
-    status_cnt <=  status_cnt + 1'b1;
+    status_cnt <=  status_cnt + `DBG_WB_STATUS_CNT_WIDTH'd1;
 end
 
 
@@ -610,23 +619,23 @@ begin
   if (rst_i)
     len_var <=  {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
   else if(update_dr_i)
-    len_var <=  len + 1'b1;
+    len_var <=  len + 1;
   else if (start_rd_tck)
     begin
       case (acc_type)  // synthesis parallel_case
         `DBG_WB_READ8 : 
                     if (len_var > 'd1)
-                      len_var <=  len_var - 1'd1;
+                      len_var <=  len_var - 1;
                     else
                       len_var <=  {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
         `DBG_WB_READ16: 
                     if (len_var > 'd2)
-                      len_var <=  len_var - 2'd2;
+                      len_var <=  len_var - 2;
                     else
                       len_var <=  {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
         `DBG_WB_READ32: 
                     if (len_var > 'd4)
-                      len_var <=  len_var - 3'd4;
+                      len_var <=  len_var - 4;
                     else
                       len_var <=  {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
         default:      len_var <=  {1'bx, {`DBG_WB_LEN_LEN{1'bx}}};
@@ -635,7 +644,8 @@ begin
 end
 
 
-assign len_eq_0 = len_var == 'h0;
+assign len_eq_0 = !(|len_var);
+
 
 
 assign byte = data_cnt[2:0] == 3'd7;
@@ -704,6 +714,9 @@ begin
                             start_wr_tck <=  1'b0;
                           end
                       end
+	default: begin
+
+	end
       endcase
     end
   else
@@ -795,17 +808,17 @@ end
 always @ (posedge wb_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    wb_adr_dsff <=  32'h0;
+    wb_adr_dsff <=  32'd0;
   else if (set_addr_wb && (!set_addr_wb_q)) // Setting starting address
     wb_adr_dsff <=  adr;
   else if (wb_ack_i)
     begin
       if ((acc_type == `DBG_WB_WRITE8) || (acc_type == `DBG_WB_READ8))
-        wb_adr_dsff <=  wb_adr_dsff + 1'd1;
+        wb_adr_dsff <=  wb_adr_dsff + 32'd1;
       else if ((acc_type == `DBG_WB_WRITE16) || (acc_type == `DBG_WB_READ16))
-        wb_adr_dsff <=  wb_adr_dsff + 2'd2;
+        wb_adr_dsff <=  wb_adr_dsff + 32'd2;
       else
-        wb_adr_dsff <=  wb_adr_dsff + 3'd4;
+        wb_adr_dsff <=  wb_adr_dsff + 32'd4;
     end
 end
 
@@ -824,7 +837,7 @@ always @ (posedge wb_clk_i or posedge rs
 begin
   if (rst_i)
     wb_sel_dsff[3:0] <=  4'h0;
-  else
+  else if ((start_wb_wr && (!start_wb_wr_q)))
     begin
       case ({wb_adr_dsff[1:0], acc_type_8bit, acc_type_16bit, acc_type_32bit}) // synthesis parallel_case
         {2'd0, 3'b100} : wb_sel_dsff[3:0] <=  4'h8;
@@ -842,10 +855,21 @@ end
 
 assign wb_sel_o = wb_sel_dsff;
 
-
+/*
 always @ (posedge wb_clk_i)
 begin
   wb_we_dsff <=  curr_cmd_go && acc_type_write;
+end
+*/
+
+always @ (posedge wb_clk_i or posedge rst_i)
+begin
+  if (rst_i)
+     wb_we_dsff <=  1'b0;
+  else if ((start_wb_wr && (!start_wb_wr_q)))
+    wb_we_dsff <=  1'b1;
+  else if (wb_ack_i || wb_err_i)
+    wb_we_dsff <=  1'b0;
 end
 
 
@@ -1016,9 +1040,9 @@ begin
   else if (wb_ack_i)
     begin
       if (acc_type == `DBG_WB_READ8)
-        mem_ptr_dsff <=  mem_ptr_dsff + 1'd1;
+        mem_ptr_dsff <=  mem_ptr_dsff + 3'd1;
       else if (acc_type == `DBG_WB_READ16)
-        mem_ptr_dsff <=  mem_ptr_dsff + 2'd2;
+        mem_ptr_dsff <=  mem_ptr_dsff + 3'd2;
     end
 end
 
@@ -1029,12 +1053,12 @@ begin
   if (wb_ack_i)
     begin
       case (wb_sel_dsff)    // synthesis parallel_case
-        4'b1000  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[31:24];            // byte
-        4'b0100  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[23:16];            // byte
-        4'b0010  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[15:08];            // byte
-        4'b0001  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[07:00];            // byte
-                                                                                               
-        4'b1100  :                                                      // half
+        4'b1000  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[31:24];// byte
+        4'b0100  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[23:16];// byte
+        4'b0010  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[15:08];// byte
+        4'b0001  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[07:00];// byte
+        
+	4'b1100  :                                                  // half
                     begin
                       mem[mem_ptr_dsff[1:0]]      <=  wb_dat_i[31:24];
                       mem[mem_ptr_dsff[1:0]+1'b1] <=  wb_dat_i[23:16];
@@ -1044,13 +1068,15 @@ begin
                       mem[mem_ptr_dsff[1:0]]      <=  wb_dat_i[15:08];
                       mem[mem_ptr_dsff[1:0]+1'b1] <=  wb_dat_i[07:00];
                     end
-        4'b1111  :                                                      // long
+        /*4'b1111  :                                                      // long*/
+	default:
                     begin
                       mem[0] <=  wb_dat_i[31:24];
                       mem[1] <=  wb_dat_i[23:16];
                       mem[2] <=  wb_dat_i[15:08];
                       mem[3] <=  wb_dat_i[07:00];
                     end
+	/*
         default  :                                                      // long
                     begin
                       mem[0] <=  8'hxx;
@@ -1058,6 +1084,7 @@ begin
                       mem[2] <=  8'hxx;
                       mem[3] <=  8'hxx;
                     end
+	 */
       endcase
     end
 end
@@ -1077,8 +1104,8 @@ begin
   else if (wb_end_tck && (!wb_end_tck_q) && (!latch_data) && (!fifo_full))  // incrementing
     begin
       case (acc_type)  // synthesis parallel_case
-        `DBG_WB_READ8 : fifo_cnt <=  fifo_cnt + 1'd1;
-        `DBG_WB_READ16: fifo_cnt <=  fifo_cnt + 2'd2;
+        `DBG_WB_READ8 : fifo_cnt <=  fifo_cnt + 3'd1;
+        `DBG_WB_READ16: fifo_cnt <=  fifo_cnt + 3'd2;
         `DBG_WB_READ32: fifo_cnt <=  fifo_cnt + 3'd4;
         default:        fifo_cnt <=  3'bxxx;
       endcase
@@ -1086,8 +1113,8 @@ begin
   else if (!(wb_end_tck && (!wb_end_tck_q)) && latch_data && (!fifo_empty))  // decrementing
     begin
       case (acc_type)  // synthesis parallel_case
-        `DBG_WB_READ8 : fifo_cnt <=  fifo_cnt - 1'd1;
-        `DBG_WB_READ16: fifo_cnt <=  fifo_cnt - 2'd2;
+        `DBG_WB_READ8 : fifo_cnt <=  fifo_cnt - 3'd1;
+        `DBG_WB_READ16: fifo_cnt <=  fifo_cnt - 3'd2;
         `DBG_WB_READ32: fifo_cnt <=  fifo_cnt - 3'd4;
         default:        fifo_cnt <=  3'bxxx;
       endcase
Index: dbg/rtl/verilog/dbg_cpu_defines.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_cpu_defines.v
+++ dbg/rtl/verilog/dbg_cpu_defines.v
@@ -68,13 +68,13 @@
 `define DBG_CPU_CMD_CNT_WIDTH    3
 
 // Defining length of the access_type field
-`define DBG_CPU_ACC_TYPE_LEN     3'd4
+`define DBG_CPU_ACC_TYPE_LEN     4
 
 // Defining length of the address
-`define DBG_CPU_ADR_LEN          6'd32
+`define DBG_CPU_ADR_LEN          32
 
 // Defining length of the length register
-`define DBG_CPU_LEN_LEN          5'd16
+`define DBG_CPU_LEN_LEN          16
 
 // Defining total length of the DR needed
 `define DBG_CPU_DR_LEN           (`DBG_CPU_ACC_TYPE_LEN + `DBG_CPU_ADR_LEN + `DBG_CPU_LEN_LEN)
@@ -88,9 +88,10 @@
 `define DBG_CPU_STATUS_CNT_WIDTH 3
 
 // Defining length of the data
-`define DBG_CPU_DATA_CNT_WIDTH      (`DBG_CPU_LEN_LEN + 3)
-`define DBG_CPU_DATA_CNT_LIM_WIDTH   `DBG_CPU_LEN_LEN
-
+//define DBG_CPU_DATA_CNT_WIDTH      `DBG_CPU_LEN_LEN + 3
+`define DBG_CPU_DATA_CNT_WIDTH    19
+//define DBG_CPU_DATA_CNT_LIM_WIDTH   `DBG_CPU_LEN_LEN
+`define DBG_CPU_DATA_CNT_LIM_WIDTH 16
 // Defining length of the control register
 `define DBG_CPU_CTRL_LEN         2
 
Index: dbg/rtl/verilog/dbg_defines.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_defines.v
+++ dbg/rtl/verilog/dbg_defines.v
@@ -143,7 +143,7 @@
 `define DBG_CPU0_SUPPORTED
 
 // If CPU_1 sub-module is supported uncomment the folowing line
-`define DBG_CPU1_SUPPORTED
+//`define DBG_CPU1_SUPPORTED
 
 // If more debug info is needed, uncomment the follofing line
 //`define DBG_MORE_INFO
Index: dbg/rtl/verilog/dbg_wb_defines.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_wb_defines.v
+++ dbg/rtl/verilog/dbg_wb_defines.v
@@ -66,16 +66,17 @@
 
 // Defining length of the command
 `define DBG_WB_CMD_LEN          3'd4
+`define DBG_WB_CMD_LEN_INT      4
 `define DBG_WB_CMD_CNT_WIDTH    3
 
 // Defining length of the access_type field
-`define DBG_WB_ACC_TYPE_LEN     3'd4
+`define DBG_WB_ACC_TYPE_LEN     4
 
 // Defining length of the address
-`define DBG_WB_ADR_LEN          6'd32
+`define DBG_WB_ADR_LEN          32
 
 // Defining length of the length register
-`define DBG_WB_LEN_LEN          5'd16
+`define DBG_WB_LEN_LEN          16
 
 // Defining total length of the DR needed
 `define DBG_WB_DR_LEN           (`DBG_WB_ACC_TYPE_LEN + `DBG_WB_ADR_LEN + `DBG_WB_LEN_LEN)
