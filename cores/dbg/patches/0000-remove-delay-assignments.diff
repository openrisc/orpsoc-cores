Index: dbg/rtl/verilog/dbg_cpu.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_cpu.v
+++ dbg/rtl/verilog/dbg_cpu.v
@@ -251,21 +251,21 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      latch_data <= #1 1'b0;
-      dr <= #1 {`DBG_CPU_DR_LEN{1'b0}};
+      latch_data <= 1'b0;
+      dr <= {`DBG_CPU_DR_LEN{1'b0}};
     end
   else if (curr_cmd_rd_comm && crc_cnt_31)  // Latching data (from internal regs)
     begin
-      dr[`DBG_CPU_DR_LEN -1:0] <= #1 {acc_type, adr, len};
+      dr[`DBG_CPU_DR_LEN -1:0] <= {acc_type, adr, len};
     end
   else if (curr_cmd_rd_ctrl && crc_cnt_31)  // Latching data (from control regs)
     begin
-      dr[`DBG_CPU_DR_LEN -1:0] <= #1 {ctrl_reg, {`DBG_CPU_DR_LEN -`DBG_CPU_CTRL_LEN{1'b0}}};
+      dr[`DBG_CPU_DR_LEN -1:0] <= {ctrl_reg, {`DBG_CPU_DR_LEN -`DBG_CPU_CTRL_LEN{1'b0}}};
     end
   else if (acc_type_read && curr_cmd_go && crc_cnt_31)  // Latchind first data (from WB)
     begin
-      dr[31:0] <= #1 input_data[31:0];
-      latch_data <= #1 1'b1;
+      dr[31:0] <= input_data[31:0];
+      latch_data <= 1'b1;
     end
   else if (acc_type_read && curr_cmd_go && crc_cnt_end) // Latching data (from WB)
     begin
@@ -273,20 +273,20 @@ begin
         `DBG_CPU_READ: begin
                       if(long & (~long_q))
                         begin
-                          dr[31:0] <= #1 input_data[31:0];
-                          latch_data <= #1 1'b1;
+                          dr[31:0] <= input_data[31:0];
+                          latch_data <= 1'b1;
                         end
                       else
                         begin
-                          dr[31:0] <= #1 {dr[30:0], 1'b0};
-                          latch_data <= #1 1'b0;
+                          dr[31:0] <=  {dr[30:0], 1'b0};
+                          latch_data <=  1'b0;
                         end
                     end
       endcase
     end
   else if (enable && (!addr_len_cnt_end))
     begin
-      dr <= #1 {dr[`DBG_CPU_DR_LEN -2:0], tdi_i};
+      dr <= {dr[`DBG_CPU_DR_LEN -2:0], tdi_i};
     end
 end
 
@@ -299,11 +299,11 @@ assign cmd_cnt_en = enable & (~cmd_cnt_e
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    cmd_cnt <= #1 {`DBG_CPU_CMD_CNT_WIDTH{1'b0}};
+    cmd_cnt <= {`DBG_CPU_CMD_CNT_WIDTH{1'b0}};
   else if (update_dr_i)
-    cmd_cnt <= #1 {`DBG_CPU_CMD_CNT_WIDTH{1'b0}};
+    cmd_cnt <= {`DBG_CPU_CMD_CNT_WIDTH{1'b0}};
   else if (cmd_cnt_en)
-    cmd_cnt <= #1 cmd_cnt + 1'b1;
+    cmd_cnt <= cmd_cnt + 1'b1;
 end
 
 
@@ -311,11 +311,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    curr_cmd <= #1 {`DBG_CPU_CMD_LEN{1'b0}};
+    curr_cmd <= {`DBG_CPU_CMD_LEN{1'b0}};
   else if (update_dr_i)
-    curr_cmd <= #1 {`DBG_CPU_CMD_LEN{1'b0}};
+    curr_cmd <= {`DBG_CPU_CMD_LEN{1'b0}};
   else if (cmd_cnt == (`DBG_CPU_CMD_LEN -1))
-    curr_cmd <= #1 {dr[`DBG_CPU_CMD_LEN-2 :0], tdi_i};
+    curr_cmd <= {dr[`DBG_CPU_CMD_LEN-2 :0], tdi_i};
 end
 
 
@@ -323,9 +323,9 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    curr_cmd_go_q <= #1 1'b0;
+    curr_cmd_go_q <= 1'b0;
   else
-    curr_cmd_go_q <= #1 curr_cmd_go;
+    curr_cmd_go_q <= curr_cmd_go;
 end
 
 
@@ -349,11 +349,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    addr_len_cnt <= #1 6'h0;
+    addr_len_cnt <= 6'h0;
   else if (update_dr_i)
-    addr_len_cnt <= #1 6'h0;
+    addr_len_cnt <= 6'h0;
   else if (addr_len_cnt_en)
-    addr_len_cnt <= #1 addr_len_cnt + 1'b1;
+    addr_len_cnt <= addr_len_cnt + 1'b1;
 end
 
 
@@ -377,11 +377,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    data_cnt <= #1 {`DBG_CPU_DATA_CNT_WIDTH{1'b0}};
+    data_cnt <= {`DBG_CPU_DATA_CNT_WIDTH{1'b0}};
   else if (update_dr_i)
-    data_cnt <= #1 {`DBG_CPU_DATA_CNT_WIDTH{1'b0}};
+    data_cnt <= {`DBG_CPU_DATA_CNT_WIDTH{1'b0}};
   else if (data_cnt_en)
-    data_cnt <= #1 data_cnt + 1'b1;
+    data_cnt <= data_cnt + 1'b1;
 end
 
 
@@ -390,9 +390,9 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    data_cnt_limit <= #1 {`DBG_CPU_DATA_CNT_LIM_WIDTH{1'b0}};
+    data_cnt_limit <= {`DBG_CPU_DATA_CNT_LIM_WIDTH{1'b0}};
   else if (update_dr_i)
-    data_cnt_limit <= #1 len + 1'b1;
+    data_cnt_limit <= len + 1'b1;
 end
 
 
@@ -418,11 +418,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    crc_cnt <= #1 {`DBG_CPU_CRC_CNT_WIDTH{1'b0}};
+    crc_cnt <= {`DBG_CPU_CRC_CNT_WIDTH{1'b0}};
   else if(crc_cnt_en)
-    crc_cnt <= #1 crc_cnt + 1'b1;
+    crc_cnt <= crc_cnt + 1'b1;
   else if (update_dr_i)
-    crc_cnt <= #1 {`DBG_CPU_CRC_CNT_WIDTH{1'b0}};
+    crc_cnt <= {`DBG_CPU_CRC_CNT_WIDTH{1'b0}};
 end
 
 assign cmd_cnt_end      = cmd_cnt      == `DBG_CPU_CMD_LEN;
@@ -435,17 +435,17 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      crc_cnt_end_q       <= #1 1'b0;
-      cmd_cnt_end_q       <= #1 1'b0;
-      data_cnt_end_q      <= #1 1'b0;
-      addr_len_cnt_end_q  <= #1 1'b0;
+      crc_cnt_end_q       <= 1'b0;
+      cmd_cnt_end_q       <= 1'b0;
+      data_cnt_end_q      <= 1'b0;
+      addr_len_cnt_end_q  <= 1'b0;
     end
   else
     begin
-      crc_cnt_end_q       <= #1 crc_cnt_end;
-      cmd_cnt_end_q       <= #1 cmd_cnt_end;
-      data_cnt_end_q      <= #1 data_cnt_end;
-      addr_len_cnt_end_q  <= #1 addr_len_cnt_end;
+      crc_cnt_end_q       <= crc_cnt_end;
+      cmd_cnt_end_q       <= cmd_cnt_end;
+      data_cnt_end_q      <= data_cnt_end;
+      addr_len_cnt_end_q  <= addr_len_cnt_end;
     end
 end
 
@@ -454,11 +454,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    status_cnt <= #1 {`DBG_CPU_STATUS_CNT_WIDTH{1'b0}};
+    status_cnt <= {`DBG_CPU_STATUS_CNT_WIDTH{1'b0}};
   else if (update_dr_i)
-    status_cnt <= #1 {`DBG_CPU_STATUS_CNT_WIDTH{1'b0}};
+    status_cnt <= {`DBG_CPU_STATUS_CNT_WIDTH{1'b0}};
   else if (status_cnt_en)
-    status_cnt <= #1 status_cnt + 1'b1;
+    status_cnt <= status_cnt + 1'b1;
 end
 
 
@@ -492,33 +492,33 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      acc_type  <= #1 {`DBG_CPU_ACC_TYPE_LEN{1'b0}};
-      adr       <= #1 {`DBG_CPU_ADR_LEN{1'b0}};
-      len       <= #1 {`DBG_CPU_LEN_LEN{1'b0}};
-      set_addr  <= #1 1'b0;
+      acc_type  <= {`DBG_CPU_ACC_TYPE_LEN{1'b0}};
+      adr       <= {`DBG_CPU_ADR_LEN{1'b0}};
+      len       <= {`DBG_CPU_LEN_LEN{1'b0}};
+      set_addr  <= 1'b0;
     end
   else if(crc_cnt_end && (!crc_cnt_end_q) && crc_match_i && curr_cmd_wr_comm)
     begin
-      acc_type  <= #1 dr[`DBG_CPU_ACC_TYPE_LEN + `DBG_CPU_ADR_LEN + `DBG_CPU_LEN_LEN -1 : `DBG_CPU_ADR_LEN + `DBG_CPU_LEN_LEN];
-      adr       <= #1 dr[`DBG_CPU_ADR_LEN + `DBG_CPU_LEN_LEN -1 : `DBG_CPU_LEN_LEN];
-      len       <= #1 dr[`DBG_CPU_LEN_LEN -1:0];
-      set_addr  <= #1 1'b1;
+      acc_type  <= dr[`DBG_CPU_ACC_TYPE_LEN + `DBG_CPU_ADR_LEN + `DBG_CPU_LEN_LEN -1 : `DBG_CPU_ADR_LEN + `DBG_CPU_LEN_LEN];
+      adr       <= dr[`DBG_CPU_ADR_LEN + `DBG_CPU_LEN_LEN -1 : `DBG_CPU_LEN_LEN];
+      len       <= dr[`DBG_CPU_LEN_LEN -1:0];
+      set_addr  <= 1'b1;
     end
   else if(cpu_end_tck)               // Writing back the address
     begin
-      adr  <= #1 cpu_addr_dsff;
+      adr  <= cpu_addr_dsff;
     end
   else
-    set_addr <= #1 1'b0;
+    set_addr <= 1'b0;
 end
 
 
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    crc_match_reg <= #1 1'b0;
+    crc_match_reg <= 1'b0;
   else if(crc_cnt_end & (~crc_cnt_end_q))
-    crc_match_reg <= #1 crc_match_i;
+    crc_match_reg <= crc_match_i;
 end
 
 
@@ -526,15 +526,15 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    len_var <= #1 {1'b0, {`DBG_CPU_LEN_LEN{1'b0}}};
+    len_var <= {1'b0, {`DBG_CPU_LEN_LEN{1'b0}}};
   else if(update_dr_i)
-    len_var <= #1 len + 1'b1;
+    len_var <= len + 1'b1;
   else if (start_rd_tck)
     begin
       if (len_var > 'd4)
-        len_var <= #1 len_var - 3'd4; 
+        len_var <= len_var - 3'd4;
       else
-        len_var <= #1 {1'b0, {`DBG_CPU_LEN_LEN{1'b0}}};
+        len_var <= {1'b0, {`DBG_CPU_LEN_LEN{1'b0}}};
     end
 end
 
@@ -550,13 +550,13 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      half_q <= #1  1'b0;
-      long_q <= #1  1'b0;
+      half_q <= 1'b0;
+      long_q <= 1'b0;
     end
   else
     begin
-      half_q <= #1 half;
-      long_q <= #1 long;
+      half_q <= half;
+      long_q <= long;
     end
 end
 
@@ -566,30 +566,30 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      start_wr_tck <= #1 1'b0;
-      cpu_dat_tmp <= #1 32'h0;
+      start_wr_tck <= 1'b0;
+      cpu_dat_tmp <= 32'h0;
     end
   else if (curr_cmd_go && acc_type_write)
     begin
       if (long_q)
         begin
-          start_wr_tck <= #1 1'b1;
-          cpu_dat_tmp <= #1 dr[31:0];
+          start_wr_tck <= 1'b1;
+          cpu_dat_tmp <= dr[31:0];
         end
       else
         begin
-          start_wr_tck <= #1 1'b0;
+          start_wr_tck <= 1'b0;
         end
     end
   else
-    start_wr_tck <= #1 1'b0;
+    start_wr_tck <= 1'b0;
 end
 
 
 // cpu_data_o in WB clk domain
 always @ (posedge cpu_clk_i)
 begin
-  cpu_data_dsff <= #1 cpu_dat_tmp;
+  cpu_data_dsff <= cpu_dat_tmp;
 end
 
 assign cpu_data_o = cpu_data_dsff;
@@ -599,24 +599,24 @@ assign cpu_data_o = cpu_data_dsff;
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    start_rd_tck <= #1 1'b0;
+    start_rd_tck <= 1'b0;
   else if (curr_cmd_go && (!curr_cmd_go_q) && acc_type_read)              // First read after cmd is entered
-    start_rd_tck <= #1 1'b1;
+    start_rd_tck <= 1'b1;
   else if ((!start_rd_tck) && curr_cmd_go && acc_type_read  && (!len_eq_0) && (!fifo_full) && (!rd_tck_started) && (!cpu_ack_tck))
-    start_rd_tck <= #1 1'b1;
+    start_rd_tck <= 1'b1;
   else
-    start_rd_tck <= #1 1'b0;
+    start_rd_tck <= 1'b0;
 end
 
 
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    rd_tck_started <= #1 1'b0;
+    rd_tck_started <= 1'b0;
   else if (update_dr_i || cpu_end_tck && (!cpu_end_tck_q))
-    rd_tck_started <= #1 1'b0;
+    rd_tck_started <= 1'b0;
   else if (start_rd_tck)
-    rd_tck_started <= #1 1'b1;
+    rd_tck_started <= 1'b1;
 end
 
 
@@ -625,35 +625,35 @@ always @ (posedge cpu_clk_i or posedge r
 begin
   if (rst_i)
     begin
-      start_rd_csff   <= #1 1'b0;
-      start_cpu_rd    <= #1 1'b0;
-      start_cpu_rd_q  <= #1 1'b0;
+      start_rd_csff   <= 1'b0;
+      start_cpu_rd    <= 1'b0;
+      start_cpu_rd_q  <= 1'b0;
 
-      start_wr_csff   <= #1 1'b0;
-      start_cpu_wr    <= #1 1'b0;
-      start_cpu_wr_q  <= #1 1'b0;
+      start_wr_csff   <= 1'b0;
+      start_cpu_wr    <= 1'b0;
+      start_cpu_wr_q  <= 1'b0;
 
-      set_addr_csff   <= #1 1'b0;
-      set_addr_cpu    <= #1 1'b0;
-      set_addr_cpu_q  <= #1 1'b0;
+      set_addr_csff   <= 1'b0;
+      set_addr_cpu    <= 1'b0;
+      set_addr_cpu_q  <= 1'b0;
 
-      cpu_ack_q       <= #1 1'b0;
+      cpu_ack_q       <= 1'b0;
     end
   else
     begin
-      start_rd_csff   <= #1 start_rd_tck;
-      start_cpu_rd    <= #1 start_rd_csff;
-      start_cpu_rd_q  <= #1 start_cpu_rd;
+      start_rd_csff   <= start_rd_tck;
+      start_cpu_rd    <= start_rd_csff;
+      start_cpu_rd_q  <= start_cpu_rd;
 
-      start_wr_csff   <= #1 start_wr_tck;
-      start_cpu_wr    <= #1 start_wr_csff;
-      start_cpu_wr_q  <= #1 start_cpu_wr;
+      start_wr_csff   <= start_wr_tck;
+      start_cpu_wr    <= start_wr_csff;
+      start_cpu_wr_q  <= start_cpu_wr;
 
-      set_addr_csff   <= #1 set_addr;
-      set_addr_cpu    <= #1 set_addr_csff;
-      set_addr_cpu_q  <= #1 set_addr_cpu;
+      set_addr_csff   <= set_addr;
+      set_addr_cpu    <= set_addr_csff;
+      set_addr_cpu_q  <= set_addr_cpu;
 
-      cpu_ack_q       <= #1 cpu_ack_i;
+      cpu_ack_q       <= cpu_ack_i;
     end
 end
 
@@ -662,11 +662,11 @@ end
 always @ (posedge cpu_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    cpu_stb_o <= #1 1'b0;
+    cpu_stb_o <= 1'b0;
   else if (cpu_ack_i)
-    cpu_stb_o <= #1 1'b0;
+    cpu_stb_o <= 1'b0;
   else if ((start_cpu_wr && (!start_cpu_wr_q)) || (start_cpu_rd && (!start_cpu_rd_q)))
-    cpu_stb_o <= #1 1'b1;
+    cpu_stb_o <= 1'b1;
 end
 
 
@@ -677,11 +677,11 @@ assign cpu_stall_o = cpu_stb_o | cpu_reg
 always @ (posedge cpu_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    cpu_addr_dsff <= #1 32'h0;
+    cpu_addr_dsff <= 32'h0;
   else if (set_addr_cpu && (!set_addr_cpu_q)) // Setting starting address
-    cpu_addr_dsff <= #1 adr;
+    cpu_addr_dsff <= adr;
   else if (cpu_ack_i && (!cpu_ack_q))
-    cpu_addr_dsff <= #1 cpu_addr_dsff + 3'd4;
+    cpu_addr_dsff <= cpu_addr_dsff + 3'd4;
 end
 
 
@@ -690,7 +690,7 @@ assign cpu_addr_o = cpu_addr_dsff;
 
 always @ (posedge cpu_clk_i)
 begin
-  cpu_we_dsff <= #1 curr_cmd_go && acc_type_write;
+  cpu_we_dsff <= curr_cmd_go && acc_type_write;
 end
 
 
@@ -702,11 +702,11 @@ assign cpu_we_o = cpu_we_dsff;
 always @ (posedge cpu_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    cpu_end <= #1 1'b0;
+    cpu_end <= 1'b0;
   else if (cpu_ack_i && (!cpu_ack_q))
-    cpu_end <= #1 1'b1;
+    cpu_end <= 1'b1;
   else if (cpu_end_rst)
-    cpu_end <= #1 1'b0;
+    cpu_end <= 1'b0;
 end
                                                                                                
                                                                                                
@@ -714,15 +714,15 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      cpu_end_csff  <= #1 1'b0;
-      cpu_end_tck   <= #1 1'b0;
-      cpu_end_tck_q <= #1 1'b0;
+      cpu_end_csff  <= 1'b0;
+      cpu_end_tck   <= 1'b0;
+      cpu_end_tck_q <= 1'b0;
     end
   else
     begin
-      cpu_end_csff  <= #1 cpu_end;
-      cpu_end_tck   <= #1 cpu_end_csff;
-      cpu_end_tck_q <= #1 cpu_end_tck;
+      cpu_end_csff  <= cpu_end;
+      cpu_end_tck   <= cpu_end_csff;
+      cpu_end_tck_q <= cpu_end_tck;
     end
 end
 
@@ -731,13 +731,13 @@ always @ (posedge cpu_clk_i or posedge r
 begin
   if (rst_i)
     begin
-      cpu_end_rst_csff <= #1 1'b0;
-      cpu_end_rst      <= #1 1'b0;
+      cpu_end_rst_csff <= 1'b0;
+      cpu_end_rst      <= 1'b0;
     end
   else
     begin
-      cpu_end_rst_csff <= #1 cpu_end_tck;
-      cpu_end_rst      <= #1 cpu_end_rst_csff;
+      cpu_end_rst_csff <= cpu_end_tck;
+      cpu_end_rst      <= cpu_end_rst_csff;
     end
 end
 
@@ -745,11 +745,11 @@ end
 always @ (posedge cpu_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    busy_cpu <= #1 1'b0;
+    busy_cpu <= 1'b0;
   else if (cpu_end_rst)
-    busy_cpu <= #1 1'b0;
+    busy_cpu <= 1'b0;
   else if (cpu_stb_o)
-    busy_cpu <= #1 1'b1;
+    busy_cpu <= 1'b1;
 end
 
 
@@ -757,19 +757,19 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      busy_csff       <= #1 1'b0;
-      busy_tck        <= #1 1'b0;
+      busy_csff       <= 1'b0;
+      busy_tck        <= 1'b0;
 
-      update_dr_csff  <= #1 1'b0;
-      update_dr_cpu   <= #1 1'b0;
+      update_dr_csff  <= 1'b0;
+      update_dr_cpu   <= 1'b0;
     end
   else
     begin
-      busy_csff       <= #1 busy_cpu;
-      busy_tck        <= #1 busy_csff;
+      busy_csff       <= busy_cpu;
+      busy_tck        <= busy_csff;
 
-      update_dr_csff  <= #1 update_dr_i;
-      update_dr_cpu   <= #1 update_dr_csff;
+      update_dr_csff  <= update_dr_i;
+      update_dr_cpu   <= update_dr_csff;
     end
 end
 
@@ -778,11 +778,11 @@ end
 always @ (posedge cpu_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    cpu_overrun <= #1 1'b0;
+    cpu_overrun <= 1'b0;
   else if(start_cpu_wr && (!start_cpu_wr_q) && cpu_ack_i)
-    cpu_overrun <= #1 1'b1;
+    cpu_overrun <= 1'b1;
   else if(update_dr_cpu) // error remains active until update_dr arrives
-    cpu_overrun <= #1 1'b0;
+    cpu_overrun <= 1'b0;
 end
 
 
@@ -790,11 +790,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    underrun_tck <= #1 1'b0;
+    underrun_tck <= 1'b0;
   else if(latch_data && (!fifo_full) && (!data_cnt_end))
-    underrun_tck <= #1 1'b1;
+    underrun_tck <= 1'b1;
   else if(update_dr_i) // error remains active until update_dr arrives
-    underrun_tck <= #1 1'b0;
+    underrun_tck <= 1'b0;
 end
 
 
@@ -802,19 +802,19 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      cpu_overrun_csff <= #1 1'b0;
-      cpu_overrun_tck  <= #1 1'b0;
+      cpu_overrun_csff <= 1'b0;
+      cpu_overrun_tck  <= 1'b0;
 
-      cpu_ack_csff     <= #1 1'b0;
-      cpu_ack_tck      <= #1 1'b0;
+      cpu_ack_csff     <= 1'b0;
+      cpu_ack_tck      <= 1'b0;
     end
   else
     begin
-      cpu_overrun_csff <= #1 cpu_overrun;
-      cpu_overrun_tck  <= #1 cpu_overrun_csff;
+      cpu_overrun_csff <= cpu_overrun;
+      cpu_overrun_tck  <= cpu_overrun_csff;
 
-      cpu_ack_csff     <= #1 cpu_ack_i;
-      cpu_ack_tck      <= #1 cpu_ack_csff;
+      cpu_ack_csff     <= cpu_ack_i;
+      cpu_ack_tck      <= cpu_ack_csff;
     end
 end
 
@@ -824,13 +824,13 @@ always @ (posedge cpu_clk_i or posedge r
 begin
   if (rst_i)
     begin
-      cpu_ce_csff  <= #1 1'b0;
-      mem_ptr_init      <= #1 1'b0;
+      cpu_ce_csff  <= 1'b0;
+      mem_ptr_init      <= 1'b0;
     end
   else
     begin
-      cpu_ce_csff  <= #1  cpu_ce_i;
-      mem_ptr_init      <= #1 ~cpu_ce_csff;
+      cpu_ce_csff  <= cpu_ce_i;
+      mem_ptr_init <= ~cpu_ce_csff;
     end
 end
 
@@ -840,10 +840,10 @@ always @ (posedge cpu_clk_i)
 begin
   if (cpu_ack_i && (!cpu_ack_q))
     begin
-      mem[0] <= #1 cpu_data_i[31:24];
-      mem[1] <= #1 cpu_data_i[23:16];
-      mem[2] <= #1 cpu_data_i[15:08];
-      mem[3] <= #1 cpu_data_i[07:00];
+      mem[0] <= cpu_data_i[31:24];
+      mem[1] <= cpu_data_i[23:16];
+      mem[2] <= cpu_data_i[15:08];
+      mem[3] <= cpu_data_i[07:00];
     end
 end
 
@@ -855,13 +855,13 @@ assign input_data = {mem[0], mem[1], mem
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    fifo_full <= #1 1'h0;
+    fifo_full <= 1'h0;
   else if (update_dr_i)
-    fifo_full <= #1 1'h0;
+    fifo_full <= 1'h0;
   else if (cpu_end_tck && (!cpu_end_tck_q) && (!latch_data) && (!fifo_full))  // incrementing
-    fifo_full <= #1 1'b1;
+    fifo_full <= 1'b1;
   else if (!(cpu_end_tck && (!cpu_end_tck_q)) && latch_data && (fifo_full))  // decrementing
-    fifo_full <= #1 1'h0;
+    fifo_full <= 1'h0;
 end
 
 
@@ -909,23 +909,23 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-    status <= #1 {`DBG_CPU_STATUS_LEN{1'b0}};
+    status <= {`DBG_CPU_STATUS_LEN{1'b0}};
     end
   else if(crc_cnt_end && (!crc_cnt_end_q) && (!(curr_cmd_go && acc_type_read)))
     begin
-    status <= #1 {1'b0, 1'b0, cpu_overrun_tck, crc_match_i};
+    status <= {1'b0, 1'b0, cpu_overrun_tck, crc_match_i};
     end
   else if (data_cnt_end && (!data_cnt_end_q) && curr_cmd_go && acc_type_read)
     begin
-    status <= #1 {1'b0, 1'b0, underrun_tck, crc_match_reg};
+    status <= {1'b0, 1'b0, underrun_tck, crc_match_reg};
     end
   else if (addr_len_cnt_end && (!addr_len_cnt_end) && (curr_cmd_rd_comm || curr_cmd_rd_ctrl))
     begin
-    status <= #1 {1'b0, 1'b0, 1'b0, crc_match_reg};
+    status <= {1'b0, 1'b0, 1'b0, crc_match_reg};
     end
   else if (shift_dr_i && (!status_cnt_end))
     begin
-    status <= #1 {status[`DBG_CPU_STATUS_LEN -2:0], status[`DBG_CPU_STATUS_LEN -1]};
+    status <= {status[`DBG_CPU_STATUS_LEN -2:0], status[`DBG_CPU_STATUS_LEN -1]};
     end
 end
 // Following status is shifted out (MSB first):
Index: dbg/rtl/verilog/dbg_cpu_registers.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_cpu_registers.v
+++ dbg/rtl/verilog/dbg_cpu_registers.v
@@ -104,11 +104,11 @@ reg                     cpu_rst_o;
 always @ (posedge cpu_clk_i or posedge rst_i)
 begin
   if(rst_i)
-    stall_bp <= #1 1'b0;
+    stall_bp <=  1'b0;
   else if(bp_i)
-    stall_bp <= #1 1'b1;
+    stall_bp <=  1'b1;
   else if(stall_reg_cpu)
-    stall_bp <= #1 1'b0;
+    stall_bp <=  1'b0;
 end
 
 
@@ -117,13 +117,13 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      stall_bp_csff <= #1 1'b0;
-      stall_bp_tck  <= #1 1'b0;
+      stall_bp_csff <=  1'b0;
+      stall_bp_tck  <=  1'b0;
     end
   else
     begin
-      stall_bp_csff <= #1 stall_bp;
-      stall_bp_tck  <= #1 stall_bp_csff;
+      stall_bp_csff <=  stall_bp;
+      stall_bp_tck  <=  stall_bp_csff;
     end
 end
 
@@ -132,13 +132,13 @@ always @ (posedge cpu_clk_i or posedge r
 begin
   if (rst_i)
     begin
-      stall_reg_csff <= #1 1'b0;
-      stall_reg_cpu  <= #1 1'b0;
+      stall_reg_csff <=  1'b0;
+      stall_reg_cpu  <=  1'b0;
     end
   else
     begin
-      stall_reg_csff <= #1 stall_reg;
-      stall_reg_cpu  <= #1 stall_reg_csff;
+      stall_reg_csff <=  stall_reg;
+      stall_reg_cpu  <=  stall_reg_csff;
     end
 end
 
@@ -150,11 +150,11 @@ assign cpu_stall_o = bp_i | stall_bp | s
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    stall_reg <= #1 1'b0;
+    stall_reg <=  1'b0;
   else if (stall_bp_tck)
-    stall_reg <= #1 1'b1;
+    stall_reg <=  1'b1;
   else if (we_i)
-    stall_reg <= #1 data_i[0];
+    stall_reg <=  data_i[0];
 end
 
 
@@ -162,9 +162,9 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    cpu_reset  <= #1 1'b0;
+    cpu_reset  <=  1'b0;
   else if(we_i)
-    cpu_reset  <= #1 data_i[1];
+    cpu_reset  <=  data_i[1];
 end
 
 
@@ -173,13 +173,13 @@ always @ (posedge cpu_clk_i or posedge r
 begin
   if (rst_i)
     begin
-      cpu_reset_csff      <= #1 1'b0; 
-      cpu_rst_o           <= #1 1'b0; 
+      cpu_reset_csff      <=  1'b0;
+      cpu_rst_o           <=  1'b0;
     end
   else
     begin
-      cpu_reset_csff      <= #1 cpu_reset;
-      cpu_rst_o           <= #1 cpu_reset_csff;
+      cpu_reset_csff      <=  cpu_reset;
+      cpu_rst_o           <=  cpu_reset_csff;
     end
 end
 
Index: dbg/rtl/verilog/dbg_crc32_d1.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_crc32_d1.v
+++ dbg/rtl/verilog/dbg_crc32_d1.v
@@ -132,13 +132,13 @@ assign new_crc[31] = crc[30];
 always @ (posedge clk or posedge rst)
 begin
   if(rst)
-    crc[31:0] <= #1 32'hffffffff;
+    crc[31:0] <=  32'hffffffff;
   else if(sync_rst)
-    crc[31:0] <= #1 32'hffffffff;
+    crc[31:0] <=  32'hffffffff;
   else if(enable)
-    crc[31:0] <= #1 new_crc;
+    crc[31:0] <=  new_crc;
   else if (shift)
-    crc[31:0] <= #1 {crc[30:0], 1'b0};
+    crc[31:0] <=  {crc[30:0], 1'b0};
 end
 
 
Index: dbg/rtl/verilog/dbg_register.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_register.v
+++ dbg/rtl/verilog/dbg_register.v
@@ -82,9 +82,9 @@ reg     [WIDTH-1:0] data_out;
 always @ (posedge clk or posedge reset)
 begin
   if(reset)
-    data_out[WIDTH-1:0] <= #1 RESET_VALUE;
+    data_out[WIDTH-1:0] <=  RESET_VALUE;
   else if(write)
-    data_out[WIDTH-1:0] <= #1 data_in[WIDTH-1:0];
+    data_out[WIDTH-1:0] <=  data_in[WIDTH-1:0];
 end
 
 
Index: dbg/rtl/verilog/dbg_wb.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_wb.v
+++ dbg/rtl/verilog/dbg_wb.v
@@ -291,11 +291,11 @@ assign acc_type_32bit   = (acc_type == `
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    ptr <= #1 2'h0;
+    ptr <=  2'h0;
   else if (update_dr_i)
-    ptr <= #1 2'h0;
+    ptr <=  2'h0;
   else if (curr_cmd_go && acc_type_read && crc_cnt_31) // first latch
-    ptr <= #1 ptr + 1'b1;
+    ptr <=  ptr + 1'b1;
   else if (curr_cmd_go && acc_type_read && byte && (!byte_q))
     ptr <= ptr + 1'd1;
 end
@@ -306,17 +306,17 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      latch_data <= #1 1'b0;
-      dr <= #1 {`DBG_WB_DR_LEN{1'b0}};
+      latch_data <=  1'b0;
+      dr <=  {`DBG_WB_DR_LEN{1'b0}};
     end
   else if (curr_cmd_rd_comm && crc_cnt_31)  // Latching data (from iternal regs)
     begin
-      dr[`DBG_WB_ACC_TYPE_LEN + `DBG_WB_ADR_LEN + `DBG_WB_LEN_LEN -1:0] <= #1 {acc_type, adr, len};
+      dr[`DBG_WB_ACC_TYPE_LEN + `DBG_WB_ADR_LEN + `DBG_WB_LEN_LEN -1:0] <=  {acc_type, adr, len};
     end
   else if (acc_type_read && curr_cmd_go && crc_cnt_31)  // Latchind first data (from WB)
     begin
-      dr[31:0] <= #1 input_data[31:0];
-      latch_data <= #1 1'b1;
+      dr[31:0] <=  input_data[31:0];
+      latch_data <=  1'b1;
     end
   else if (acc_type_read && curr_cmd_go && crc_cnt_end) // Latching data (from WB)
     begin
@@ -325,17 +325,17 @@ begin
           if(byte & (~byte_q))
             begin
               case (ptr)    // synthesis parallel_case
-                2'b00 : dr[31:24] <= #1 input_data[31:24];
-                2'b01 : dr[31:24] <= #1 input_data[23:16];
-                2'b10 : dr[31:24] <= #1 input_data[15:8];
-                2'b11 : dr[31:24] <= #1 input_data[7:0];
+                2'b00 : dr[31:24] <=  input_data[31:24];
+                2'b01 : dr[31:24] <=  input_data[23:16];
+                2'b10 : dr[31:24] <=  input_data[15:8];
+                2'b11 : dr[31:24] <=  input_data[7:0];
               endcase
-              latch_data <= #1 1'b1;
+              latch_data <=  1'b1;
             end
           else
             begin
-              dr[31:24] <= #1 {dr[30:24], 1'b0};
-              latch_data <= #1 1'b0;
+              dr[31:24] <=  {dr[30:24], 1'b0};
+              latch_data <=  1'b0;
             end
         end
       else if (acc_type == `DBG_WB_READ16)
@@ -343,34 +343,34 @@ begin
           if(half & (~half_q))
             begin
               if (ptr[1])
-                dr[31:16] <= #1 input_data[15:0];
+                dr[31:16] <=  input_data[15:0];
               else
-                dr[31:16] <= #1 input_data[31:16];
-              latch_data <= #1 1'b1;
+                dr[31:16] <=  input_data[31:16];
+              latch_data <=  1'b1;
             end
           else
             begin
-              dr[31:16] <= #1 {dr[30:16], 1'b0};
-              latch_data <= #1 1'b0;
+              dr[31:16] <=  {dr[30:16], 1'b0};
+              latch_data <=  1'b0;
             end
         end
       else if (acc_type == `DBG_WB_READ32)
         begin
           if(long & (~long_q))
             begin
-              dr[31:0] <= #1 input_data[31:0];
-              latch_data <= #1 1'b1;
+              dr[31:0] <=  input_data[31:0];
+              latch_data <=  1'b1;
             end
           else
             begin
-              dr[31:0] <= #1 {dr[30:0], 1'b0};
-              latch_data <= #1 1'b0;
+              dr[31:0] <=  {dr[30:0], 1'b0};
+              latch_data <=  1'b0;
             end
         end
     end
   else if (enable && (!addr_len_cnt_end))
     begin
-      dr <= #1 {dr[`DBG_WB_DR_LEN -2:0], tdi_i};
+      dr <=  {dr[`DBG_WB_DR_LEN -2:0], tdi_i};
     end
 end
 
@@ -383,11 +383,11 @@ assign cmd_cnt_en = enable & (~cmd_cnt_e
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    cmd_cnt <= #1 {`DBG_WB_CMD_CNT_WIDTH{1'b0}};
+    cmd_cnt <=  {`DBG_WB_CMD_CNT_WIDTH{1'b0}};
   else if (update_dr_i)
-    cmd_cnt <= #1 {`DBG_WB_CMD_CNT_WIDTH{1'b0}};
+    cmd_cnt <=  {`DBG_WB_CMD_CNT_WIDTH{1'b0}};
   else if (cmd_cnt_en)
-    cmd_cnt <= #1 cmd_cnt + 1'b1;
+    cmd_cnt <=  cmd_cnt + 1'b1;
 end
 
 
@@ -395,11 +395,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    curr_cmd <= #1 {`DBG_WB_CMD_LEN{1'b0}};
+    curr_cmd <=  {`DBG_WB_CMD_LEN{1'b0}};
   else if (update_dr_i)
-    curr_cmd <= #1 {`DBG_WB_CMD_LEN{1'b0}};
+    curr_cmd <=  {`DBG_WB_CMD_LEN{1'b0}};
   else if (cmd_cnt == (`DBG_WB_CMD_LEN -1))
-    curr_cmd <= #1 {dr[`DBG_WB_CMD_LEN-2 :0], tdi_i};
+    curr_cmd <=  {dr[`DBG_WB_CMD_LEN-2 :0], tdi_i};
 end
 
 
@@ -407,9 +407,9 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    curr_cmd_go_q <= #1 1'b0;
+    curr_cmd_go_q <=  1'b0;
   else
-    curr_cmd_go_q <= #1 curr_cmd_go;
+    curr_cmd_go_q <=  curr_cmd_go;
 end
 
 
@@ -433,11 +433,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    addr_len_cnt <= #1 6'h0;
+    addr_len_cnt <=  6'h0;
   else if (update_dr_i)
-    addr_len_cnt <= #1 6'h0;
+    addr_len_cnt <=  6'h0;
   else if (addr_len_cnt_en)
-    addr_len_cnt <= #1 addr_len_cnt + 1'b1;
+    addr_len_cnt <=  addr_len_cnt + 1'b1;
 end
 
 
@@ -461,11 +461,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    data_cnt <= #1 {`DBG_WB_DATA_CNT_WIDTH{1'b0}};
+    data_cnt <=  {`DBG_WB_DATA_CNT_WIDTH{1'b0}};
   else if (update_dr_i)
-    data_cnt <= #1 {`DBG_WB_DATA_CNT_WIDTH{1'b0}};
+    data_cnt <=  {`DBG_WB_DATA_CNT_WIDTH{1'b0}};
   else if (data_cnt_en)
-    data_cnt <= #1 data_cnt + 1'b1;
+    data_cnt <=  data_cnt + 1'b1;
 end
 
 
@@ -474,9 +474,9 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    data_cnt_limit <= #1 {`DBG_WB_DATA_CNT_LIM_WIDTH{1'b0}};
+    data_cnt_limit <=  {`DBG_WB_DATA_CNT_LIM_WIDTH{1'b0}};
   else if (update_dr_i)
-    data_cnt_limit <= #1 len + 1'b1;
+    data_cnt_limit <=  len + 1'b1;
 end
 
 
@@ -502,11 +502,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    crc_cnt <= #1 {`DBG_WB_CRC_CNT_WIDTH{1'b0}};
+    crc_cnt <=  {`DBG_WB_CRC_CNT_WIDTH{1'b0}};
   else if(crc_cnt_en)
-    crc_cnt <= #1 crc_cnt + 1'b1;
+    crc_cnt <=  crc_cnt + 1'b1;
   else if (update_dr_i)
-    crc_cnt <= #1 {`DBG_WB_CRC_CNT_WIDTH{1'b0}};
+    crc_cnt <=  {`DBG_WB_CRC_CNT_WIDTH{1'b0}};
 end
 
 assign cmd_cnt_end      = cmd_cnt      == `DBG_WB_CMD_LEN;
@@ -519,17 +519,17 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      crc_cnt_end_q       <= #1 1'b0;
-      cmd_cnt_end_q       <= #1 1'b0;
-      data_cnt_end_q      <= #1 1'b0;
-      addr_len_cnt_end_q  <= #1 1'b0;
+      crc_cnt_end_q       <=  1'b0;
+      cmd_cnt_end_q       <=  1'b0;
+      data_cnt_end_q      <=  1'b0;
+      addr_len_cnt_end_q  <=  1'b0;
     end
   else
     begin
-      crc_cnt_end_q       <= #1 crc_cnt_end;
-      cmd_cnt_end_q       <= #1 cmd_cnt_end;
-      data_cnt_end_q      <= #1 data_cnt_end;
-      addr_len_cnt_end_q  <= #1 addr_len_cnt_end;
+      crc_cnt_end_q       <=  crc_cnt_end;
+      cmd_cnt_end_q       <=  cmd_cnt_end;
+      data_cnt_end_q      <=  data_cnt_end;
+      addr_len_cnt_end_q  <=  addr_len_cnt_end;
     end
 end
 
@@ -538,11 +538,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    status_cnt <= #1 {`DBG_WB_STATUS_CNT_WIDTH{1'b0}};
+    status_cnt <=  {`DBG_WB_STATUS_CNT_WIDTH{1'b0}};
   else if (update_dr_i)
-    status_cnt <= #1 {`DBG_WB_STATUS_CNT_WIDTH{1'b0}};
+    status_cnt <=  {`DBG_WB_STATUS_CNT_WIDTH{1'b0}};
   else if (status_cnt_en)
-    status_cnt <= #1 status_cnt + 1'b1;
+    status_cnt <=  status_cnt + 1'b1;
 end
 
 
@@ -574,33 +574,33 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      acc_type  <= #1 {`DBG_WB_ACC_TYPE_LEN{1'b0}};
-      adr       <= #1 {`DBG_WB_ADR_LEN{1'b0}};
-      len       <= #1 {`DBG_WB_LEN_LEN{1'b0}};
-      set_addr  <= #1 1'b0;
+      acc_type  <=  {`DBG_WB_ACC_TYPE_LEN{1'b0}};
+      adr       <=  {`DBG_WB_ADR_LEN{1'b0}};
+      len       <=  {`DBG_WB_LEN_LEN{1'b0}};
+      set_addr  <=  1'b0;
     end
   else if(crc_cnt_end && (!crc_cnt_end_q) && crc_match_i && curr_cmd_wr_comm)
     begin
-      acc_type  <= #1 dr[`DBG_WB_ACC_TYPE_LEN + `DBG_WB_ADR_LEN + `DBG_WB_LEN_LEN -1 : `DBG_WB_ADR_LEN + `DBG_WB_LEN_LEN];
-      adr       <= #1 dr[`DBG_WB_ADR_LEN + `DBG_WB_LEN_LEN -1 : `DBG_WB_LEN_LEN];
-      len       <= #1 dr[`DBG_WB_LEN_LEN -1:0];
-      set_addr  <= #1 1'b1;
+      acc_type  <=  dr[`DBG_WB_ACC_TYPE_LEN + `DBG_WB_ADR_LEN + `DBG_WB_LEN_LEN -1 : `DBG_WB_ADR_LEN + `DBG_WB_LEN_LEN];
+      adr       <=  dr[`DBG_WB_ADR_LEN + `DBG_WB_LEN_LEN -1 : `DBG_WB_LEN_LEN];
+      len       <=  dr[`DBG_WB_LEN_LEN -1:0];
+      set_addr  <=  1'b1;
     end
   else if(wb_end_tck)               // Writing back the address
     begin
-      adr  <= #1 wb_adr_dsff;
+      adr  <=  wb_adr_dsff;
     end
   else
-    set_addr <= #1 1'b0;
+    set_addr <=  1'b0;
 end
 
 
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    crc_match_reg <= #1 1'b0;
+    crc_match_reg <=  1'b0;
   else if(crc_cnt_end & (~crc_cnt_end_q))
-    crc_match_reg <= #1 crc_match_i;
+    crc_match_reg <=  crc_match_i;
 end
 
 
@@ -608,28 +608,28 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    len_var <= #1 {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
+    len_var <=  {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
   else if(update_dr_i)
-    len_var <= #1 len + 1'b1;
+    len_var <=  len + 1'b1;
   else if (start_rd_tck)
     begin
       case (acc_type)  // synthesis parallel_case
         `DBG_WB_READ8 : 
                     if (len_var > 'd1)
-                      len_var <= #1 len_var - 1'd1;
+                      len_var <=  len_var - 1'd1;
                     else
-                      len_var <= #1 {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
+                      len_var <=  {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
         `DBG_WB_READ16: 
                     if (len_var > 'd2)
-                      len_var <= #1 len_var - 2'd2; 
+                      len_var <=  len_var - 2'd2;
                     else
-                      len_var <= #1 {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
+                      len_var <=  {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
         `DBG_WB_READ32: 
                     if (len_var > 'd4)
-                      len_var <= #1 len_var - 3'd4; 
+                      len_var <=  len_var - 3'd4;
                     else
-                      len_var <= #1 {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
-        default:      len_var <= #1 {1'bx, {`DBG_WB_LEN_LEN{1'bx}}};
+                      len_var <=  {1'b0, {`DBG_WB_LEN_LEN{1'b0}}};
+        default:      len_var <=  {1'bx, {`DBG_WB_LEN_LEN{1'bx}}};
       endcase
     end
 end
@@ -647,15 +647,15 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      byte_q <= #1  1'b0;
-      half_q <= #1  1'b0;
-      long_q <= #1  1'b0;
+      byte_q <=   1'b0;
+      half_q <=   1'b0;
+      long_q <=   1'b0;
     end
   else
     begin
-      byte_q <= #1 byte;
-      half_q <= #1 half;
-      long_q <= #1 long;
+      byte_q <=  byte;
+      half_q <=  half;
+      long_q <=  long;
     end
 end
 
@@ -665,8 +665,8 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      start_wr_tck <= #1 1'b0;
-      wb_dat_tmp <= #1 32'h0;
+      start_wr_tck <=  1'b0;
+      wb_dat_tmp <=  32'h0;
     end
   else if (curr_cmd_go && acc_type_write)
     begin
@@ -674,47 +674,47 @@ begin
         `DBG_WB_WRITE8  : begin
                         if (byte_q)
                           begin
-                            start_wr_tck <= #1 1'b1;
-                            wb_dat_tmp <= #1 {4{dr[7:0]}};
+                            start_wr_tck <=  1'b1;
+                            wb_dat_tmp <=  {4{dr[7:0]}};
                           end
                         else
                           begin
-                            start_wr_tck <= #1 1'b0;
+                            start_wr_tck <=  1'b0;
                           end
                       end
         `DBG_WB_WRITE16 : begin
                         if (half_q)
                           begin
-                            start_wr_tck <= #1 1'b1;
-                            wb_dat_tmp <= #1 {2{dr[15:0]}};
+                            start_wr_tck <=  1'b1;
+                            wb_dat_tmp <=  {2{dr[15:0]}};
                           end
                         else
                           begin
-                            start_wr_tck <= #1 1'b0;
+                            start_wr_tck <=  1'b0;
                           end
                       end
         `DBG_WB_WRITE32 : begin
                         if (long_q)
                           begin
-                            start_wr_tck <= #1 1'b1;
-                            wb_dat_tmp <= #1 dr[31:0];
+                            start_wr_tck <=  1'b1;
+                            wb_dat_tmp <=  dr[31:0];
                           end
                         else
                           begin
-                            start_wr_tck <= #1 1'b0;
+                            start_wr_tck <=  1'b0;
                           end
                       end
       endcase
     end
   else
-    start_wr_tck <= #1 1'b0;
+    start_wr_tck <=  1'b0;
 end
 
 
 // wb_dat_o in WB clk domain
 always @ (posedge wb_clk_i)
 begin
-  wb_dat_dsff <= #1 wb_dat_tmp;
+  wb_dat_dsff <=  wb_dat_tmp;
 end
 
 assign wb_dat_o = wb_dat_dsff;
@@ -724,24 +724,24 @@ assign wb_dat_o = wb_dat_dsff;
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    start_rd_tck <= #1 1'b0;
+    start_rd_tck <=  1'b0;
   else if (curr_cmd_go && (!curr_cmd_go_q) && acc_type_read)              // First read after cmd is entered
-    start_rd_tck <= #1 1'b1;
+    start_rd_tck <=  1'b1;
   else if ((!start_rd_tck) && curr_cmd_go && acc_type_read  && (!len_eq_0) && (!fifo_full) && (!rd_tck_started))
-    start_rd_tck <= #1 1'b1;
+    start_rd_tck <=  1'b1;
   else
-    start_rd_tck <= #1 1'b0;
+    start_rd_tck <=  1'b0;
 end
 
 
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    rd_tck_started <= #1 1'b0;
+    rd_tck_started <=  1'b0;
   else if (update_dr_i || wb_end_tck && (!wb_end_tck_q))
-    rd_tck_started <= #1 1'b0;
+    rd_tck_started <=  1'b0;
   else if (start_rd_tck)
-    rd_tck_started <= #1 1'b1;
+    rd_tck_started <=  1'b1;
 end
 
 
@@ -750,31 +750,31 @@ always @ (posedge wb_clk_i or posedge rs
 begin
   if (rst_i)
     begin
-      start_rd_csff   <= #1 1'b0;
-      start_wb_rd     <= #1 1'b0;
-      start_wb_rd_q   <= #1 1'b0;
+      start_rd_csff   <=  1'b0;
+      start_wb_rd     <=  1'b0;
+      start_wb_rd_q   <=  1'b0;
 
-      start_wr_csff   <= #1 1'b0;
-      start_wb_wr     <= #1 1'b0;
-      start_wb_wr_q   <= #1 1'b0;
+      start_wr_csff   <=  1'b0;
+      start_wb_wr     <=  1'b0;
+      start_wb_wr_q   <=  1'b0;
 
-      set_addr_csff   <= #1 1'b0;
-      set_addr_wb     <= #1 1'b0;
-      set_addr_wb_q   <= #1 1'b0;
+      set_addr_csff   <=  1'b0;
+      set_addr_wb     <=  1'b0;
+      set_addr_wb_q   <=  1'b0;
     end
   else
     begin
-      start_rd_csff   <= #1 start_rd_tck;
-      start_wb_rd     <= #1 start_rd_csff;
-      start_wb_rd_q   <= #1 start_wb_rd;
+      start_rd_csff   <=  start_rd_tck;
+      start_wb_rd     <=  start_rd_csff;
+      start_wb_rd_q   <=  start_wb_rd;
 
-      start_wr_csff   <= #1 start_wr_tck;
-      start_wb_wr     <= #1 start_wr_csff;
-      start_wb_wr_q   <= #1 start_wb_wr;
+      start_wr_csff   <=  start_wr_tck;
+      start_wb_wr     <=  start_wr_csff;
+      start_wb_wr_q   <=  start_wb_wr;
 
-      set_addr_csff   <= #1 set_addr;
-      set_addr_wb     <= #1 set_addr_csff;
-      set_addr_wb_q   <= #1 set_addr_wb;
+      set_addr_csff   <=  set_addr;
+      set_addr_wb     <=  set_addr_csff;
+      set_addr_wb_q   <=  set_addr_wb;
     end
 end
 
@@ -783,11 +783,11 @@ end
 always @ (posedge wb_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    wb_cyc_o <= #1 1'b0;
+    wb_cyc_o <=  1'b0;
   else if ((start_wb_wr && (!start_wb_wr_q)) || (start_wb_rd && (!start_wb_rd_q)))
-    wb_cyc_o <= #1 1'b1;
+    wb_cyc_o <=  1'b1;
   else if (wb_ack_i || wb_err_i)
-    wb_cyc_o <= #1 1'b0;
+    wb_cyc_o <=  1'b0;
 end
 
 
@@ -795,17 +795,17 @@ end
 always @ (posedge wb_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    wb_adr_dsff <= #1 32'h0;
+    wb_adr_dsff <=  32'h0;
   else if (set_addr_wb && (!set_addr_wb_q)) // Setting starting address
-    wb_adr_dsff <= #1 adr;
+    wb_adr_dsff <=  adr;
   else if (wb_ack_i)
     begin
       if ((acc_type == `DBG_WB_WRITE8) || (acc_type == `DBG_WB_READ8))
-        wb_adr_dsff <= #1 wb_adr_dsff + 1'd1;
+        wb_adr_dsff <=  wb_adr_dsff + 1'd1;
       else if ((acc_type == `DBG_WB_WRITE16) || (acc_type == `DBG_WB_READ16))
-        wb_adr_dsff <= #1 wb_adr_dsff + 2'd2;
+        wb_adr_dsff <=  wb_adr_dsff + 2'd2;
       else
-        wb_adr_dsff <= #1 wb_adr_dsff + 3'd4;
+        wb_adr_dsff <=  wb_adr_dsff + 3'd4;
     end
 end
 
@@ -823,18 +823,18 @@ assign wb_adr_o = wb_adr_dsff;
 always @ (posedge wb_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    wb_sel_dsff[3:0] <= #1 4'h0;
+    wb_sel_dsff[3:0] <=  4'h0;
   else
     begin
       case ({wb_adr_dsff[1:0], acc_type_8bit, acc_type_16bit, acc_type_32bit}) // synthesis parallel_case
-        {2'd0, 3'b100} : wb_sel_dsff[3:0] <= #1 4'h8;
-        {2'd0, 3'b010} : wb_sel_dsff[3:0] <= #1 4'hC;
-        {2'd0, 3'b001} : wb_sel_dsff[3:0] <= #1 4'hF;
-        {2'd1, 3'b100} : wb_sel_dsff[3:0] <= #1 4'h4;
-        {2'd2, 3'b100} : wb_sel_dsff[3:0] <= #1 4'h2;
-        {2'd2, 3'b010} : wb_sel_dsff[3:0] <= #1 4'h3;
-        {2'd3, 3'b100} : wb_sel_dsff[3:0] <= #1 4'h1;
-        default:         wb_sel_dsff[3:0] <= #1 4'hx;
+        {2'd0, 3'b100} : wb_sel_dsff[3:0] <=  4'h8;
+        {2'd0, 3'b010} : wb_sel_dsff[3:0] <=  4'hC;
+        {2'd0, 3'b001} : wb_sel_dsff[3:0] <=  4'hF;
+        {2'd1, 3'b100} : wb_sel_dsff[3:0] <=  4'h4;
+        {2'd2, 3'b100} : wb_sel_dsff[3:0] <=  4'h2;
+        {2'd2, 3'b010} : wb_sel_dsff[3:0] <=  4'h3;
+        {2'd3, 3'b100} : wb_sel_dsff[3:0] <=  4'h1;
+        default:         wb_sel_dsff[3:0] <=  4'hx;
       endcase
     end
 end
@@ -845,7 +845,7 @@ assign wb_sel_o = wb_sel_dsff;
 
 always @ (posedge wb_clk_i)
 begin
-  wb_we_dsff <= #1 curr_cmd_go && acc_type_write;
+  wb_we_dsff <=  curr_cmd_go && acc_type_write;
 end
 
 
@@ -861,11 +861,11 @@ assign wb_bte_o = 2'h0;     // always pe
 always @ (posedge wb_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    wb_end <= #1 1'b0;
+    wb_end <=  1'b0;
   else if (wb_ack_i || wb_err_i)
-    wb_end <= #1 1'b1;
+    wb_end <=  1'b1;
   else if (wb_end_rst)
-    wb_end <= #1 1'b0;
+    wb_end <=  1'b0;
 end
                                                                                                
                                                                                                
@@ -873,15 +873,15 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      wb_end_csff  <= #1 1'b0;
-      wb_end_tck   <= #1 1'b0;
-      wb_end_tck_q <= #1 1'b0;
+      wb_end_csff  <=  1'b0;
+      wb_end_tck   <=  1'b0;
+      wb_end_tck_q <=  1'b0;
     end
   else
     begin
-      wb_end_csff  <= #1 wb_end;
-      wb_end_tck   <= #1 wb_end_csff;
-      wb_end_tck_q <= #1 wb_end_tck;
+      wb_end_csff  <=  wb_end;
+      wb_end_tck   <=  wb_end_csff;
+      wb_end_tck_q <=  wb_end_tck;
     end
 end
 
@@ -890,13 +890,13 @@ always @ (posedge wb_clk_i or posedge rs
 begin
   if (rst_i)
     begin
-      wb_end_rst_csff <= #1 1'b0;
-      wb_end_rst      <= #1 1'b0;
+      wb_end_rst_csff <=  1'b0;
+      wb_end_rst      <=  1'b0;
     end
   else
     begin
-      wb_end_rst_csff <= #1 wb_end_tck;
-      wb_end_rst      <= #1 wb_end_rst_csff;
+      wb_end_rst_csff <=  wb_end_tck;
+      wb_end_rst      <=  wb_end_rst_csff;
     end
 end
 
@@ -904,11 +904,11 @@ end
 always @ (posedge wb_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    busy_wb <= #1 1'b0;
+    busy_wb <=  1'b0;
   else if (wb_end_rst)
-    busy_wb <= #1 1'b0;
+    busy_wb <=  1'b0;
   else if (wb_cyc_o)
-    busy_wb <= #1 1'b1;
+    busy_wb <=  1'b1;
 end
 
 
@@ -916,19 +916,19 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      busy_csff       <= #1 1'b0;
-      busy_tck        <= #1 1'b0;
+      busy_csff       <=  1'b0;
+      busy_tck        <=  1'b0;
 
-      update_dr_csff  <= #1 1'b0;
-      update_dr_wb    <= #1 1'b0;
+      update_dr_csff  <=  1'b0;
+      update_dr_wb    <=  1'b0;
     end
   else
     begin
-      busy_csff       <= #1 busy_wb;
-      busy_tck        <= #1 busy_csff;
+      busy_csff       <=  busy_wb;
+      busy_tck        <=  busy_csff;
 
-      update_dr_csff  <= #1 update_dr_i;
-      update_dr_wb    <= #1 update_dr_csff;
+      update_dr_csff  <=  update_dr_i;
+      update_dr_wb    <=  update_dr_csff;
     end
 end
 
@@ -937,11 +937,11 @@ end
 always @ (posedge wb_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    wb_error <= #1 1'b0;
+    wb_error <=  1'b0;
   else if(wb_err_i)
-    wb_error <= #1 1'b1;
+    wb_error <=  1'b1;
   else if(update_dr_wb) // error remains active until update_dr arrives
-    wb_error <= #1 1'b0;
+    wb_error <=  1'b0;
 end
 
 
@@ -949,11 +949,11 @@ end
 always @ (posedge wb_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    wb_overrun <= #1 1'b0;
+    wb_overrun <=  1'b0;
   else if(start_wb_wr && (!start_wb_wr_q) && wb_cyc_o)
-    wb_overrun <= #1 1'b1;
+    wb_overrun <=  1'b1;
   else if(update_dr_wb) // error remains active until update_dr arrives
-    wb_overrun <= #1 1'b0;
+    wb_overrun <=  1'b0;
 end
 
 
@@ -961,11 +961,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    underrun_tck <= #1 1'b0;
+    underrun_tck <=  1'b0;
   else if(latch_data && fifo_empty && (!data_cnt_end))
-    underrun_tck <= #1 1'b1;
+    underrun_tck <=  1'b1;
   else if(update_dr_i) // error remains active until update_dr arrives
-    underrun_tck <= #1 1'b0;
+    underrun_tck <=  1'b0;
 end
 
 
@@ -973,19 +973,19 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-      wb_error_csff   <= #1 1'b0;
-      wb_error_tck    <= #1 1'b0;
+      wb_error_csff   <=  1'b0;
+      wb_error_tck    <=  1'b0;
 
-      wb_overrun_csff <= #1 1'b0;
-      wb_overrun_tck  <= #1 1'b0;
+      wb_overrun_csff <=  1'b0;
+      wb_overrun_tck  <=  1'b0;
     end
   else
     begin
-      wb_error_csff   <= #1 wb_error;
-      wb_error_tck    <= #1 wb_error_csff;
+      wb_error_csff   <=  wb_error;
+      wb_error_tck    <=  wb_error_csff;
 
-      wb_overrun_csff <= #1 wb_overrun;
-      wb_overrun_tck  <= #1 wb_overrun_csff;
+      wb_overrun_csff <=  wb_overrun;
+      wb_overrun_tck  <=  wb_overrun_csff;
     end
 end
 
@@ -995,13 +995,13 @@ always @ (posedge wb_clk_i or posedge rs
 begin
   if (rst_i)
     begin
-      wishbone_ce_csff  <= #1 1'b0;
-      mem_ptr_init      <= #1 1'b0;
+      wishbone_ce_csff  <=  1'b0;
+      mem_ptr_init      <=  1'b0;
     end
   else
     begin
-      wishbone_ce_csff  <= #1  wishbone_ce_i;
-      mem_ptr_init      <= #1 ~wishbone_ce_csff;
+      wishbone_ce_csff  <=   wishbone_ce_i;
+      mem_ptr_init      <=  ~wishbone_ce_csff;
     end
 end
 
@@ -1010,15 +1010,15 @@ end
 always @ (posedge wb_clk_i or posedge rst_i)
 begin
   if (rst_i)
-    mem_ptr_dsff <= #1 3'h0;
+    mem_ptr_dsff <=  3'h0;
   else if(mem_ptr_init)
-    mem_ptr_dsff <= #1 3'h0;
+    mem_ptr_dsff <=  3'h0;
   else if (wb_ack_i)
     begin
       if (acc_type == `DBG_WB_READ8)
-        mem_ptr_dsff <= #1 mem_ptr_dsff + 1'd1;
+        mem_ptr_dsff <=  mem_ptr_dsff + 1'd1;
       else if (acc_type == `DBG_WB_READ16)
-        mem_ptr_dsff <= #1 mem_ptr_dsff + 2'd2;
+        mem_ptr_dsff <=  mem_ptr_dsff + 2'd2;
     end
 end
 
@@ -1029,34 +1029,34 @@ begin
   if (wb_ack_i)
     begin
       case (wb_sel_dsff)    // synthesis parallel_case
-        4'b1000  :  mem[mem_ptr_dsff[1:0]] <= #1 wb_dat_i[31:24];            // byte
-        4'b0100  :  mem[mem_ptr_dsff[1:0]] <= #1 wb_dat_i[23:16];            // byte
-        4'b0010  :  mem[mem_ptr_dsff[1:0]] <= #1 wb_dat_i[15:08];            // byte
-        4'b0001  :  mem[mem_ptr_dsff[1:0]] <= #1 wb_dat_i[07:00];            // byte
+        4'b1000  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[31:24];            // byte
+        4'b0100  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[23:16];            // byte
+        4'b0010  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[15:08];            // byte
+        4'b0001  :  mem[mem_ptr_dsff[1:0]] <=  wb_dat_i[07:00];            // byte
                                                                                                
         4'b1100  :                                                      // half
                     begin
-                      mem[mem_ptr_dsff[1:0]]      <= #1 wb_dat_i[31:24];
-                      mem[mem_ptr_dsff[1:0]+1'b1] <= #1 wb_dat_i[23:16];
+                      mem[mem_ptr_dsff[1:0]]      <=  wb_dat_i[31:24];
+                      mem[mem_ptr_dsff[1:0]+1'b1] <=  wb_dat_i[23:16];
                     end
         4'b0011  :                                                      // half
                     begin
-                      mem[mem_ptr_dsff[1:0]]      <= #1 wb_dat_i[15:08];
-                      mem[mem_ptr_dsff[1:0]+1'b1] <= #1 wb_dat_i[07:00];
+                      mem[mem_ptr_dsff[1:0]]      <=  wb_dat_i[15:08];
+                      mem[mem_ptr_dsff[1:0]+1'b1] <=  wb_dat_i[07:00];
                     end
         4'b1111  :                                                      // long
                     begin
-                      mem[0] <= #1 wb_dat_i[31:24];
-                      mem[1] <= #1 wb_dat_i[23:16];
-                      mem[2] <= #1 wb_dat_i[15:08];
-                      mem[3] <= #1 wb_dat_i[07:00];
+                      mem[0] <=  wb_dat_i[31:24];
+                      mem[1] <=  wb_dat_i[23:16];
+                      mem[2] <=  wb_dat_i[15:08];
+                      mem[3] <=  wb_dat_i[07:00];
                     end
         default  :                                                      // long
                     begin
-                      mem[0] <= #1 8'hxx;
-                      mem[1] <= #1 8'hxx;
-                      mem[2] <= #1 8'hxx;
-                      mem[3] <= #1 8'hxx;
+                      mem[0] <=  8'hxx;
+                      mem[1] <=  8'hxx;
+                      mem[2] <=  8'hxx;
+                      mem[3] <=  8'hxx;
                     end
       endcase
     end
@@ -1071,25 +1071,25 @@ assign input_data = {mem[0], mem[1], mem
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    fifo_cnt <= #1 3'h0;
+    fifo_cnt <=  3'h0;
   else if (update_dr_i)
-    fifo_cnt <= #1 3'h0;
+    fifo_cnt <=  3'h0;
   else if (wb_end_tck && (!wb_end_tck_q) && (!latch_data) && (!fifo_full))  // incrementing
     begin
       case (acc_type)  // synthesis parallel_case
-        `DBG_WB_READ8 : fifo_cnt <= #1 fifo_cnt + 1'd1;
-        `DBG_WB_READ16: fifo_cnt <= #1 fifo_cnt + 2'd2;
-        `DBG_WB_READ32: fifo_cnt <= #1 fifo_cnt + 3'd4;
-        default:        fifo_cnt <= #1 3'bxxx;
+        `DBG_WB_READ8 : fifo_cnt <=  fifo_cnt + 1'd1;
+        `DBG_WB_READ16: fifo_cnt <=  fifo_cnt + 2'd2;
+        `DBG_WB_READ32: fifo_cnt <=  fifo_cnt + 3'd4;
+        default:        fifo_cnt <=  3'bxxx;
       endcase
     end
   else if (!(wb_end_tck && (!wb_end_tck_q)) && latch_data && (!fifo_empty))  // decrementing
     begin
       case (acc_type)  // synthesis parallel_case
-        `DBG_WB_READ8 : fifo_cnt <= #1 fifo_cnt - 1'd1;
-        `DBG_WB_READ16: fifo_cnt <= #1 fifo_cnt - 2'd2;
-        `DBG_WB_READ32: fifo_cnt <= #1 fifo_cnt - 3'd4;
-        default:        fifo_cnt <= #1 3'bxxx;
+        `DBG_WB_READ8 : fifo_cnt <=  fifo_cnt - 1'd1;
+        `DBG_WB_READ16: fifo_cnt <=  fifo_cnt - 2'd2;
+        `DBG_WB_READ32: fifo_cnt <=  fifo_cnt - 3'd4;
+        default:        fifo_cnt <=  3'bxxx;
       endcase
     end
 end
@@ -1144,23 +1144,23 @@ always @ (posedge tck_i or posedge rst_i
 begin
   if (rst_i)
     begin
-    status <= #1 {`DBG_WB_STATUS_LEN{1'b0}};
+    status <=  {`DBG_WB_STATUS_LEN{1'b0}};
     end
   else if(crc_cnt_end && (!crc_cnt_end_q) && (!(curr_cmd_go && acc_type_read)))
     begin
-    status <= #1 {1'b0, wb_error_tck, wb_overrun_tck, crc_match_i};
+    status <=  {1'b0, wb_error_tck, wb_overrun_tck, crc_match_i};
     end
   else if (data_cnt_end && (!data_cnt_end_q) && curr_cmd_go && acc_type_read)
     begin
-    status <= #1 {1'b0, wb_error_tck, underrun_tck, crc_match_reg};
+    status <=  {1'b0, wb_error_tck, underrun_tck, crc_match_reg};
     end
   else if (addr_len_cnt_end && (!addr_len_cnt_end) && curr_cmd_rd_comm)
     begin
-    status <= #1 {1'b0, 1'b0, 1'b0, crc_match_reg};
+    status <=  {1'b0, 1'b0, 1'b0, crc_match_reg};
     end
   else if (shift_dr_i && (!status_cnt_end))
     begin
-    status <= #1 {status[`DBG_WB_STATUS_LEN -2:0], status[`DBG_WB_STATUS_LEN -1]};
+    status <=  {status[`DBG_WB_STATUS_LEN -2:0], status[`DBG_WB_STATUS_LEN -1]};
     end
 end
 // Following status is shifted out (MSB first):
Index: dbg/rtl/verilog/dbg_top.v
===================================================================
--- dbg.orig/rtl/verilog/dbg_top.v
+++ dbg/rtl/verilog/dbg_top.v
@@ -390,11 +390,11 @@ wire shift_crc;
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    data_cnt <= #1 {`DBG_TOP_DATA_CNT{1'b0}};
+    data_cnt <=  {`DBG_TOP_DATA_CNT{1'b0}};
   else if(shift_dr_i & (~data_cnt_end))
-    data_cnt <= #1 data_cnt + 1'b1;
+    data_cnt <=  data_cnt + 1'b1;
   else if (update_dr_i)
-    data_cnt <= #1 {`DBG_TOP_DATA_CNT{1'b0}};
+    data_cnt <=  {`DBG_TOP_DATA_CNT{1'b0}};
 end
 
 
@@ -405,11 +405,11 @@ assign data_cnt_end = data_cnt == `DBG_T
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    crc_cnt <= #1 {`DBG_TOP_CRC_CNT{1'b0}};
+    crc_cnt <=  {`DBG_TOP_CRC_CNT{1'b0}};
   else if(shift_dr_i & data_cnt_end & (~crc_cnt_end) & module_select)
-    crc_cnt <= #1 crc_cnt + 1'b1;
+    crc_cnt <=  crc_cnt + 1'b1;
   else if (update_dr_i)
-    crc_cnt <= #1 {`DBG_TOP_CRC_CNT{1'b0}};
+    crc_cnt <=  {`DBG_TOP_CRC_CNT{1'b0}};
 end
 
 assign crc_cnt_end = crc_cnt == `DBG_TOP_CRC_LEN;
@@ -418,9 +418,9 @@ assign crc_cnt_end = crc_cnt == `DBG_TOP
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    crc_cnt_end_q  <= #1 1'b0;
+    crc_cnt_end_q  <=  1'b0;
   else
-    crc_cnt_end_q  <= #1 crc_cnt_end;
+    crc_cnt_end_q  <=  crc_cnt_end;
 end
 
 
@@ -428,11 +428,11 @@ end
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    status_cnt <= #1 {`DBG_TOP_STATUS_CNT_WIDTH{1'b0}};
+    status_cnt <=  {`DBG_TOP_STATUS_CNT_WIDTH{1'b0}};
   else if(shift_dr_i & crc_cnt_end & (~status_cnt_end))
-    status_cnt <= #1 status_cnt + 1'b1;
+    status_cnt <=  status_cnt + 1'b1;
   else if (update_dr_i)
-    status_cnt <= #1 {`DBG_TOP_STATUS_CNT_WIDTH{1'b0}};
+    status_cnt <=  {`DBG_TOP_STATUS_CNT_WIDTH{1'b0}};
 end
 
 assign status_cnt_end = status_cnt == `DBG_TOP_STATUS_LEN;
@@ -444,38 +444,38 @@ assign selecting_command = shift_dr_i &
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    module_select <= #1 1'b0;
+    module_select <=  1'b0;
   else if(selecting_command & tdi_i)       // Chain select
-    module_select <= #1 1'b1;
+    module_select <=  1'b1;
   else if (update_dr_i)
-    module_select <= #1 1'b0;
+    module_select <=  1'b0;
 end
 
 
 always @ (module_id)
 begin
   `ifdef DBG_CPU0_SUPPORTED
-  cpu0_debug_module  <= #1 1'b0;
+  cpu0_debug_module  <=  1'b0;
   `endif
   `ifdef DBG_CPU1_SUPPORTED
-  cpu1_debug_module  <= #1 1'b0;
+  cpu1_debug_module  <=  1'b0;
   `endif
   `ifdef DBG_WISHBONE_SUPPORTED
-  wishbone_module   <= #1 1'b0;
+  wishbone_module   <=  1'b0;
   `endif
-  module_select_error    <= #1 1'b0;
+  module_select_error    <=  1'b0;
   
   case (module_id)                /* synthesis parallel_case */
     `ifdef DBG_CPU0_SUPPORTED
-      `DBG_TOP_CPU0_DEBUG_MODULE     :   cpu0_debug_module   <= #1 1'b1;
+      `DBG_TOP_CPU0_DEBUG_MODULE     :   cpu0_debug_module   <=  1'b1;
     `endif
     `ifdef DBG_CPU1_SUPPORTED
-      `DBG_TOP_CPU1_DEBUG_MODULE     :   cpu1_debug_module   <= #1 1'b1;
+      `DBG_TOP_CPU1_DEBUG_MODULE     :   cpu1_debug_module   <=  1'b1;
     `endif
     `ifdef DBG_WISHBONE_SUPPORTED
-      `DBG_TOP_WISHBONE_DEBUG_MODULE :   wishbone_module     <= #1 1'b1;
+      `DBG_TOP_WISHBONE_DEBUG_MODULE :   wishbone_module     <=  1'b1;
     `endif
-    default                          :   module_select_error <= #1 1'b1; 
+    default                          :   module_select_error <=  1'b1;
   endcase
 end
 
@@ -488,7 +488,7 @@ begin
   if (rst_i)
     module_id <= {`DBG_TOP_MODULE_ID_LENGTH{1'b1}};
   else if(module_latch_en & crc_match)
-    module_id <= #1 module_dr[`DBG_TOP_MODULE_DATA_LEN -2:0];
+    module_id <=  module_dr[`DBG_TOP_MODULE_DATA_LEN -2:0];
 end
 
 
@@ -498,9 +498,9 @@ assign data_shift_en = shift_dr_i & (~da
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    module_dr <= #1 `DBG_TOP_MODULE_DATA_LEN'h0;
+    module_dr <=  `DBG_TOP_MODULE_DATA_LEN'h0;
   else if (data_shift_en)
-    module_dr[`DBG_TOP_MODULE_DATA_LEN -1:0] <= #1 {module_dr[`DBG_TOP_MODULE_DATA_LEN -2:0], tdi_i};
+    module_dr[`DBG_TOP_MODULE_DATA_LEN -1:0] <=  {module_dr[`DBG_TOP_MODULE_DATA_LEN -2:0], tdi_i};
 end
 
 
@@ -530,11 +530,11 @@ assign crc_en_dbg = shift_dr_i & crc_cnt
 always @ (posedge tck_i or posedge rst_i)
 begin
   if (rst_i)
-    crc_started <= #1 1'b0;
+    crc_started <=  1'b0;
   else if (crc_en)
-    crc_started <= #1 1'b1;
+    crc_started <=  1'b1;
   else if (update_dr_i)
-    crc_started <= #1 1'b0;
+    crc_started <=  1'b0;
 end
 
 
@@ -621,7 +621,7 @@ end
 
 always @ (negedge tck_i)
 begin
-  tdo_o <= #1 tdo_tmp;
+  tdo_o <=  tdo_tmp;
 end
 
 
@@ -635,40 +635,40 @@ begin
   if (rst_i)
     begin
       `ifdef DBG_WISHBONE_SUPPORTED
-      wishbone_ce <= #1 1'b0;
+      wishbone_ce <=  1'b0;
       `endif
       `ifdef DBG_CPU0_SUPPORTED
-      cpu0_ce <= #1 1'b0;
+      cpu0_ce <=  1'b0;
       `endif
       `ifdef DBG_CPU1_SUPPORTED
-      cpu1_ce <= #1 1'b0;
+      cpu1_ce <=  1'b0;
       `endif
     end
   else if(selecting_command & (~tdi_i))
     begin
       `ifdef DBG_WISHBONE_SUPPORTED
       if (wishbone_module)      // wishbone CE
-        wishbone_ce <= #1 1'b1;
+        wishbone_ce <=  1'b1;
       `endif
       `ifdef DBG_CPU0_SUPPORTED
       if (cpu0_debug_module)     // CPU CE
-        cpu0_ce <= #1 1'b1;
+        cpu0_ce <=  1'b1;
       `endif
       `ifdef DBG_CPU1_SUPPORTED
       if (cpu1_debug_module)     // CPU CE
-        cpu1_ce <= #1 1'b1;
+        cpu1_ce <=  1'b1;
       `endif
     end
   else if (update_dr_i)
     begin
       `ifdef DBG_WISHBONE_SUPPORTED
-      wishbone_ce <= #1 1'b0;
+      wishbone_ce <=  1'b0;
       `endif
       `ifdef DBG_CPU0_SUPPORTED
-      cpu0_ce <= #1 1'b0;
+      cpu0_ce <=  1'b0;
       `endif
       `ifdef DBG_CPU1_SUPPORTED
-      cpu1_ce <= #1 1'b0;
+      cpu1_ce <=  1'b0;
       `endif
     end
 end
