#!/usr/bin/env python
import sys
from collections import OrderedDict

if sys.version_info[0] >= 3:
    import configparser
else:
    import ConfigParser as configparser
from verilogwriter import Signal, Wire, Instance, ModulePort, VerilogWriter


WB_MASTER_PORTS = [Signal('adr', 32),
                   Signal('dat', 32),
                   Signal('sel',  4),
                   Signal('we'),
                   Signal('cyc'),
                   Signal('stb'),
                   Signal('cti',  3),
                   Signal('bte',  2)]

WB_SLAVE_PORTS  = [Signal('dat', 32),
                   Signal('ack'),
                   Signal('err'),
                   Signal('rty')]

def parse_number(s):
    if s.startswith('0x'):
        return int(s, 16)
    else:
        return int(s)

class Master:
    def __init__(self, name):
        self.name = name
        self.slaves = []

class Slave:
    def __init__(self, name, d=None):
        self.name = name
        self.masters = []
        self.datawidth = 32
        self.offset = 0
        self.size = 0
        self.mask = 0
        if d:
            self.load_dict(d)

    def load_dict(self, d):
        for key, value in d.items():
            if key == 'datawidth':
                self.datawidth = value
            elif key == 'offset':
                self.offset = parse_number(value)
            elif key == 'size':
                self.size = parse_number(value)
                self.mask = ~(self.size-1) & 0xffffffff
            else:
                raise Exception("Unknown property " + key + " in slave section " + self.name)
            

class Parameter:
    def __init__(self, name, value):
        self.name  = name
        self.value = value

class Port:
    def __init__(self, name, value):
        self.name = name
        self.value = value


class WbIntercon:
    def __init__(self, name, config_file):
        self.verilog_writer = VerilogWriter(name)
        self.template_writer = VerilogWriter(name);
        self.name = 'wb_intercon'
        d = {}
        self.slaves = {}
        self.masters = OrderedDict()
        config = configparser.SafeConfigParser()
        config.read(config_file)
        for section in config.sections():
            type=section.split()[0]
            try:
                name=section.split()[1]
            except IndexError:
                print("Malformed section header. Format is master|slave <name>")
                exit(1)
            if type == "master":
                print("Found master " + name)
                self.masters[name] = Master(name)
                d[name] = config.get(section, 'slaves').split()
            elif type == "slave":
                print("Found slave " + name)
                self.slaves[name] = Slave(name, dict(config.items(section)))
            else:
                print("Invalid section type " + type)
                exit(1)
        #Create master/slave connections
        for master, slaves in d.items():
            for slave in slaves:
                self.masters[master].slaves += [self.slaves[slave]]
                self.slaves[slave].masters += [self.masters[master]]

    def _dump(self):
        print("*Masters*")
        for master in self.masters.values():
            print(master.name)
            for slave in master.slaves:
                print(' ' + slave.name)

        print("*Slaves*")
        for slave in self.slaves.values():
            print(slave.name)
            for master in slave.masters:
                print(' ' + master.name)
                            

    def _gen_mux(self, master):
        parameters = [Parameter('num_slaves', len(master.slaves))]
        match_addr = '{' + ', '.join(["32'h{addr:08x}".format(addr=s.offset) for s in master.slaves]) + '}'
        parameters += [Parameter('MATCH_ADDR', match_addr)]

        match_mask = '{' + ', '.join(["32'h{mask:08x}".format(mask=s.mask) for s in master.slaves]) + '}'
        parameters += [Parameter('MATCH_MASK', match_mask)]
        ports = [Port('wb_clk_i', 'wb_clk_i'),
                 Port('wb_rst_i', 'wb_rst_i')]
        m = master.name

        #Create mux master side connections
        for p in WB_MASTER_PORTS:
            ports += [Port('wbm_' + p.name + '_i', 'wb_'+m+'_'+p.name+'_i')]
        for p in WB_SLAVE_PORTS:
            ports += [Port('wbm_' + p.name + '_o', 'wb_'+m+'_'+p.name+'_o')]

        #Create mux slave side connections
        name_list = []
        for s in master.slaves:

            #If we have only one master the wb_mux is the last piece before
            #the slave. If the slave's datawidth is 32, we go straight from
            #the wb_mux to the slave.
            if len(s.masters) == 1 and int(s.datawidth) == 32:
                name_list += ['wb_' + s.name + '_{0}_{1}']
            #If not, we'll need a wb_data_resize and then new wires.
            elif len(s.masters) == 1 and int(s.datawidth) < 32:
                 name_list += ['wb_{dir}' + 'resize_' + s.name + '_{0}']
            #If there is more than on master for that slave, there will
            #be an arbiter and the wb_data_resize will be after that.
            else:
                name_list += ['wb_{dir}'+ m + '_' + s.name + '_{0}']

        for p in WB_MASTER_PORTS:
            ports += [Port('wbs_'+p.name+'_o', '{' + ', '.join(name_list).format(p.name, 'o', dir='m2s_')+'}')]
        for p in WB_SLAVE_PORTS:
            ports += [Port('wbs_'+p.name+'_i', '{' + ', '.join(name_list).format(p.name, 'i', dir='s2m_')+'}')]

        self.verilog_writer.add(Instance('wb_mux', 'wb_mux_'+m,parameters, ports))

    def _gen_arbiter(self, slave):
        parameters = [Parameter('num_masters', len(slave.masters))]
        ports = [Port('wb_clk_i', 'wb_clk_i'),
                 Port('wb_rst_i', 'wb_rst_i')]
        s = slave.name

        name_list = []
        for m in slave.masters:
            if len(m.slaves) == 1:
                name_list += ['wb_' + m.name + '_{0}_{1}']
            else:
                name_list += ['wb_{dir}'+ m.name + '_' + s + '_{0}']
        for p in WB_MASTER_PORTS:
            ports += [Port('wbm_'+p.name+'_i', '{' + ', '.join(name_list).format(p.name, 'i', dir='m2s_')+'}')]
        for p in WB_SLAVE_PORTS:
            ports += [Port('wbm_'+p.name+'_o', '{' + ', '.join(name_list).format(p.name, 'o', dir='s2m_')+'}')]

        #Create slave connections
        #If the slave's data width is 32, we don't need a wb_data_resize
        if int(slave.datawidth) == 32:
            for p in WB_MASTER_PORTS:
                ports += [Port('wbs_' + p.name + '_o', 'wb_'+s+'_'+p.name+'_o')]
            for p in WB_SLAVE_PORTS:
                ports += [Port('wbs_' + p.name + '_i', 'wb_'+s+'_'+p.name+'_i')]
        #Else, connect to the resizer
        else:
            for p in WB_MASTER_PORTS:
                ports += [Port('wbs_' + p.name + '_o', 'wb_m2s_resize_'+s+'_'+p.name)]
            for p in WB_SLAVE_PORTS:
                ports += [Port('wbs_' + p.name + '_i', 'wb_s2m_resize_'+s+'_'+p.name)]

        self.verilog_writer.add(Instance('wb_arbiter', 'wb_arbiter_'+s,parameters, ports))

    def _gen_resize(self, slave):
        parameters = [Parameter('aw', 32)]
        parameters += [Parameter('mdw', 32)]
        parameters += [Parameter('sdw', slave.datawidth)]
        s = slave.name

        ports =[]
        #Create master connections
        for p in WB_MASTER_PORTS:
            ports += [Port('wbm_'+p.name+'_i', 'wb_m2s_resize_'+s+'_'+p.name)]
        for p in WB_SLAVE_PORTS:
            ports += [Port('wbm_'+p.name+'_o', 'wb_s2m_resize_'+s+'_'+p.name)]

        #Create slave connections
        for p in WB_MASTER_PORTS:
            if p.name != "sel":
                ports += [Port('wbs_' + p.name + '_o', 'wb_'+s+'_'+p.name + '_o')]
        for p in WB_SLAVE_PORTS:
            ports += [Port('wbs_' + p.name + '_i', 'wb_'+s+'_'+p.name + '_i')]

        self.verilog_writer.add(Instance('wb_data_resize', 'wb_data_resize_'+s,parameters, ports))

    def write(self, file):
        #Declare wires. Only conections between muxes and arbiters need explicit wires
        for key, value in self.masters.items():
            if len(value.slaves)>1:
                for slave in value.slaves:
                    if len(slave.masters)>1:
                        for p in WB_MASTER_PORTS:
                            self.verilog_writer.add(Wire('wb_m2s_{0}_{1}_{2}'.format(key, slave.name, p.name), p.width))
                        for p in WB_SLAVE_PORTS:
                            self.verilog_writer.add(Wire('wb_s2m_{0}_{1}_{2}'.format(key, slave.name, p.name), p.width))

        self.verilog_writer.add(ModulePort('wb_clk_i', 'input'))
        self.verilog_writer.add(ModulePort('wb_rst_i', 'input'))

        template_ports = [Port('wb_clk_i', 'wb_clk'),
                          Port('wb_rst_i', 'wb_rst')]
        template_parameters = []

        for master in self.masters.values():
            for p in WB_MASTER_PORTS:
                portname = 'wb_{master}_{port}_i'.format(master=master.name, port=p.name)
                wirename = 'wb_m2s_{master}_{port}'.format(master=master.name, port=p.name)
                self.verilog_writer.add(ModulePort(portname, 'input', p.width))
                self.template_writer.add(Wire(wirename, p.width))
                template_ports += [Port(portname, wirename)]
            for p in WB_SLAVE_PORTS:
                portname = 'wb_{master}_{port}_o'.format(master=master.name, port=p.name)
                wirename = 'wb_s2m_{master}_{port}'.format(master=master.name, port=p.name)
                self.verilog_writer.add(ModulePort(portname, 'output', p.width))
                self.template_writer.add(Wire(wirename, p.width))
                template_ports += [Port(portname, wirename)]

            self._gen_mux(master)

        for slave in self.slaves.values():
            for p in WB_MASTER_PORTS:
                portname = 'wb_{slave}_{port}_o'.format(slave=slave.name, port=p.name)
                wirename = 'wb_m2s_{slave}_{port}'.format(slave=slave.name, port=p.name)
                self.verilog_writer.add(ModulePort(portname, 'output', p.width))
                self.template_writer.add(Wire(wirename, p.width))
                template_ports += [Port(portname, wirename)]
            for p in WB_SLAVE_PORTS:
                portname = 'wb_{slave}_{port}_i'.format(slave=slave.name, port=p.name)
                wirename = 'wb_s2m_{slave}_{port}'.format(slave=slave.name, port=p.name)
                self.verilog_writer.add(ModulePort(portname, 'input', p.width))
                self.template_writer.add(Wire(wirename, p.width))
                template_ports += [Port(portname, wirename)]
            if int(slave.datawidth) < 32:
                for p in WB_MASTER_PORTS:
                    wirename = 'wb_m2s_resize_{slave}_{port}'.format(slave=slave.name, port=p.name)
                    self.verilog_writer.add(Wire(wirename, p.width))
                for p in WB_SLAVE_PORTS:
                    wirename = 'wb_s2m_resize_{slave}_{port}'.format(slave=slave.name, port=p.name)
                    self.verilog_writer.add(Wire(wirename, p.width))

            if len(slave.masters) > 1:
                self._gen_arbiter(slave)

            if int(slave.datawidth) < 32:
                self._gen_resize(slave)

        self.template_writer.add(Instance(self.name, self.name+'0',
                                          template_parameters, template_ports))

        self.verilog_writer.write(file)
        self.template_writer.write(file+'h')

if __name__ == "__main__":
    if not (len(sys.argv) == 3):
        print("wb_intercon_gen <config_file> <out_file>")
        exit(0)
    g = WbIntercon('wb_intercon', sys.argv[1])

    print("="*80)
    g.write(sys.argv[2])
