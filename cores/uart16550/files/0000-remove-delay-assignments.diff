Index: uart16550/rtl/verilog/uart_receiver.v
===================================================================
--- uart16550.orig/rtl/verilog/uart_receiver.v
+++ uart16550/rtl/verilog/uart_receiver.v
@@ -276,122 +276,122 @@ always @(posedge clk or posedge wb_rst_i
 begin
   if (wb_rst_i)
   begin
-     rstate 			<= #1 sr_idle;
-	  rbit_in 				<= #1 1'b0;
-	  rcounter16 			<= #1 0;
-	  rbit_counter 		<= #1 0;
-	  rparity_xor 		<= #1 1'b0;
-	  rframing_error 	<= #1 1'b0;
-	  rparity_error 		<= #1 1'b0;
-	  rparity 				<= #1 1'b0;
-	  rshift 				<= #1 0;
-	  rf_push 				<= #1 1'b0;
-	  rf_data_in 			<= #1 0;
+     rstate 			<= sr_idle;
+	  rbit_in 				<= 1'b0;
+	  rcounter16 			<= 0;
+	  rbit_counter 		<= 0;
+	  rparity_xor 		<= 1'b0;
+	  rframing_error 	<= 1'b0;
+	  rparity_error 		<= 1'b0;
+	  rparity 				<= 1'b0;
+	  rshift 				<= 0;
+	  rf_push 				<= 1'b0;
+	  rf_data_in 			<= 0;
   end
   else
   if (enable)
   begin
 	case (rstate)
 	sr_idle : begin
-			rf_push 			  <= #1 1'b0;
-			rf_data_in 	  <= #1 0;
-			rcounter16 	  <= #1 4'b1110;
+			rf_push 			  <= 1'b0;
+			rf_data_in 	  <= 0;
+			rcounter16 	  <= 4'b1110;
 			if (srx_pad_i==1'b0 & ~break_error)   // detected a pulse (start bit?)
 			begin
-				rstate 		  <= #1 sr_rec_start;
+				rstate 		  <= sr_rec_start;
 			end
 		end
 	sr_rec_start :	begin
-  			rf_push 			  <= #1 1'b0;
+  			rf_push 			  <= 1'b0;
 				if (rcounter16_eq_7)    // check the pulse
 					if (srx_pad_i==1'b1)   // no start bit
-						rstate <= #1 sr_idle;
+						rstate <= sr_idle;
 					else            // start bit detected
-						rstate <= #1 sr_rec_prepare;
-				rcounter16 <= #1 rcounter16_minus_1;
+						rstate <= sr_rec_prepare;
+				rcounter16 <= rcounter16_minus_1;
 			end
 	sr_rec_prepare:begin
 				case (lcr[/*`UART_LC_BITS*/1:0])  // number of bits in a word
-				2'b00 : rbit_counter <= #1 3'b100;
-				2'b01 : rbit_counter <= #1 3'b101;
-				2'b10 : rbit_counter <= #1 3'b110;
-				2'b11 : rbit_counter <= #1 3'b111;
+				2'b00 : rbit_counter <= 3'b100;
+				2'b01 : rbit_counter <= 3'b101;
+				2'b10 : rbit_counter <= 3'b110;
+				2'b11 : rbit_counter <= 3'b111;
 				endcase
 				if (rcounter16_eq_0)
 				begin
-					rstate		<= #1 sr_rec_bit;
-					rcounter16	<= #1 4'b1110;
-					rshift		<= #1 0;
+					rstate		<= sr_rec_bit;
+					rcounter16	<= 4'b1110;
+					rshift		<= 0;
 				end
 				else
-					rstate <= #1 sr_rec_prepare;
-				rcounter16 <= #1 rcounter16_minus_1;
+					rstate <= sr_rec_prepare;
+				rcounter16 <= rcounter16_minus_1;
 			end
 	sr_rec_bit :	begin
 				if (rcounter16_eq_0)
-					rstate <= #1 sr_end_bit;
+					rstate <= sr_end_bit;
 				if (rcounter16_eq_7) // read the bit
 					case (lcr[/*`UART_LC_BITS*/1:0])  // number of bits in a word
-					2'b00 : rshift[4:0]  <= #1 {srx_pad_i, rshift[4:1]};
-					2'b01 : rshift[5:0]  <= #1 {srx_pad_i, rshift[5:1]};
-					2'b10 : rshift[6:0]  <= #1 {srx_pad_i, rshift[6:1]};
-					2'b11 : rshift[7:0]  <= #1 {srx_pad_i, rshift[7:1]};
+					2'b00 : rshift[4:0]  <= {srx_pad_i, rshift[4:1]};
+					2'b01 : rshift[5:0]  <= {srx_pad_i, rshift[5:1]};
+					2'b10 : rshift[6:0]  <= {srx_pad_i, rshift[6:1]};
+					2'b11 : rshift[7:0]  <= {srx_pad_i, rshift[7:1]};
 					endcase
-				rcounter16 <= #1 rcounter16_minus_1;
+				rcounter16 <= rcounter16_minus_1;
 			end
 	sr_end_bit :   begin
 				if (rbit_counter==3'b0) // no more bits in word
 					if (lcr[`UART_LC_PE]) // choose state based on parity
-						rstate <= #1 sr_rec_parity;
+						rstate <= sr_rec_parity;
 					else
 					begin
-						rstate <= #1 sr_rec_stop;
-						rparity_error <= #1 1'b0;  // no parity - no error :)
+						rstate <= sr_rec_stop;
+						rparity_error <= 1'b0;  // no parity - no error :)
 					end
 				else		// else we have more bits to read
 				begin
-					rstate <= #1 sr_rec_bit;
-					rbit_counter <= #1 rbit_counter - 1'b1;
+					rstate <= sr_rec_bit;
+					rbit_counter <= rbit_counter - 1'b1;
 				end
-				rcounter16 <= #1 4'b1110;
+				rcounter16 <= 4'b1110;
 			end
 	sr_rec_parity: begin
 				if (rcounter16_eq_7)	// read the parity
 				begin
-					rparity <= #1 srx_pad_i;
-					rstate <= #1 sr_ca_lc_parity;
+					rparity <= srx_pad_i;
+					rstate <= sr_ca_lc_parity;
 				end
-				rcounter16 <= #1 rcounter16_minus_1;
+				rcounter16 <= rcounter16_minus_1;
 			end
 	sr_ca_lc_parity : begin    // rcounter equals 6
-				rcounter16  <= #1 rcounter16_minus_1;
-				rparity_xor <= #1 ^{rshift,rparity}; // calculate parity on all incoming data
-				rstate      <= #1 sr_check_parity;
+				rcounter16  <= rcounter16_minus_1;
+				rparity_xor <= ^{rshift,rparity}; // calculate parity on all incoming data
+				rstate      <= sr_check_parity;
 			  end
 	sr_check_parity: begin	  // rcounter equals 5
 				case ({lcr[`UART_LC_EP],lcr[`UART_LC_SP]})
-					2'b00: rparity_error <= #1  rparity_xor == 0;  // no error if parity 1
-					2'b01: rparity_error <= #1 ~rparity;      // parity should sticked to 1
-					2'b10: rparity_error <= #1  rparity_xor == 1;   // error if parity is odd
-					2'b11: rparity_error <= #1  rparity;	  // parity should be sticked to 0
+					2'b00: rparity_error <=  rparity_xor == 0;  // no error if parity 1
+					2'b01: rparity_error <= ~rparity;      // parity should sticked to 1
+					2'b10: rparity_error <=  rparity_xor == 1;   // error if parity is odd
+					2'b11: rparity_error <=  rparity;	  // parity should be sticked to 0
 				endcase
-				rcounter16 <= #1 rcounter16_minus_1;
-				rstate <= #1 sr_wait1;
+				rcounter16 <= rcounter16_minus_1;
+				rstate <= sr_wait1;
 			  end
 	sr_wait1 :	if (rcounter16_eq_0)
 			begin
-				rstate <= #1 sr_rec_stop;
-				rcounter16 <= #1 4'b1110;
+				rstate <= sr_rec_stop;
+				rcounter16 <= 4'b1110;
 			end
 			else
-				rcounter16 <= #1 rcounter16_minus_1;
+				rcounter16 <= rcounter16_minus_1;
 	sr_rec_stop :	begin
 				if (rcounter16_eq_7)	// read the parity
 				begin
-					rframing_error <= #1 !srx_pad_i; // no framing error if input is 1 (stop bit)
-					rstate <= #1 sr_push;
+					rframing_error <= !srx_pad_i; // no framing error if input is 1 (stop bit)
+					rstate <= sr_push;
 				end
-				rcounter16 <= #1 rcounter16_minus_1;
+				rcounter16 <= rcounter16_minus_1;
 			end
 	sr_push :	begin
 ///////////////////////////////////////
@@ -399,22 +399,22 @@ begin
         if(srx_pad_i | break_error)
           begin
             if(break_error)
-        		  rf_data_in 	<= #1 {8'b0, 3'b100}; // break input (empty character) to receiver FIFO
+        		  rf_data_in 	<= {8'b0, 3'b100}; // break input (empty character) to receiver FIFO
             else
-        			rf_data_in  <= #1 {rshift, 1'b0, rparity_error, rframing_error};
-      		  rf_push 		  <= #1 1'b1;
-    				rstate        <= #1 sr_idle;
+        			rf_data_in  <= {rshift, 1'b0, rparity_error, rframing_error};
+      		  rf_push 		  <= 1'b1;
+    				rstate        <= sr_idle;
           end
         else if(~rframing_error)  // There's always a framing before break_error -> wait for break or srx_pad_i
           begin
-       			rf_data_in  <= #1 {rshift, 1'b0, rparity_error, rframing_error};
-      		  rf_push 		  <= #1 1'b1;
-      			rcounter16 	  <= #1 4'b1110;
-    				rstate 		  <= #1 sr_rec_start;
+       			rf_data_in  <= {rshift, 1'b0, rparity_error, rframing_error};
+      		  rf_push 		  <= 1'b1;
+      			rcounter16 	  <= 4'b1110;
+    				rstate 		  <= sr_rec_start;
           end
                       
 			end
-	default : rstate <= #1 sr_idle;
+	default : rstate <= sr_idle;
 	endcase
   end  // if (enable)
 end // always of receiver
@@ -424,7 +424,7 @@ begin
   if(wb_rst_i)
     rf_push_q <= 0;
   else
-    rf_push_q <= #1 rf_push;
+    rf_push_q <= rf_push;
 end
 
 assign rf_push_pulse = rf_push & ~rf_push_q;
@@ -454,13 +454,13 @@ assign 		brc_value = toc_value[9:2]; //
 always @(posedge clk or posedge wb_rst_i)
 begin
 	if (wb_rst_i)
-		counter_b <= #1 8'd159;
+		counter_b <= 8'd159;
 	else
 	if (srx_pad_i)
-		counter_b <= #1 brc_value; // character time length - 1
+		counter_b <= brc_value; // character time length - 1
 	else
 	if(enable & counter_b != 8'b0)            // only work on enable times  break not reached.
-		counter_b <= #1 counter_b - 1;  // decrement break counter
+		counter_b <= counter_b - 1;  // decrement break counter
 end // always of break condition detection
 
 ///
@@ -470,13 +470,13 @@ reg	[9:0]	counter_t;	// counts the timeo
 always @(posedge clk or posedge wb_rst_i)
 begin
 	if (wb_rst_i)
-		counter_t <= #1 10'd639; // 10 bits for the default 8N1
+		counter_t <= 10'd639; // 10 bits for the default 8N1
 	else
 		if(rf_push_pulse || rf_pop || rf_count == 0) // counter is reset when RX FIFO is empty, accessed or above trigger level
-			counter_t <= #1 toc_value;
+			counter_t <= toc_value;
 		else
 		if (enable && counter_t != 10'b0)  // we don't want to underflow
-			counter_t <= #1 counter_t - 1;		
+			counter_t <= counter_t - 1;
 end
 	
 endmodule
Index: uart16550/rtl/verilog/uart_regs.v
===================================================================
--- uart16550.orig/rtl/verilog/uart_regs.v
+++ uart16550/rtl/verilog/uart_regs.v
@@ -421,13 +421,13 @@ end // always @ (dl or dlab or ier or ii
 always @(posedge clk or posedge wb_rst_i)
 begin
 	if (wb_rst_i)
-		rf_pop <= #1 0; 
+		rf_pop <= 0;
 	else
 	if (rf_pop)	// restore the signal to 0 after one clock cycle
-		rf_pop <= #1 0;
+		rf_pop <= 0;
 	else
 	if (wb_re_i && wb_addr_i == `UART_REG_RB && !dlab)
-		rf_pop <= #1 1; // advance read pointer
+		rf_pop <= 1; // advance read pointer
 end
 
 wire 	lsr_mask_condition;
@@ -446,9 +446,9 @@ assign fifo_write = (wb_we_i && wb_addr_
 always @(posedge clk or posedge wb_rst_i)
 begin
 	if (wb_rst_i)
-		lsr_mask_d <= #1 0;
+		lsr_mask_d <= 0;
 	else // reset bits in the Line Status Register
-		lsr_mask_d <= #1 lsr_mask_condition;
+		lsr_mask_d <= lsr_mask_condition;
 end
 
 // lsr_mask is rise detected
@@ -458,13 +458,13 @@ assign lsr_mask = lsr_mask_condition &&
 always @(posedge clk or posedge wb_rst_i)
 begin
 	if (wb_rst_i)
-		msi_reset <= #1 1;
+		msi_reset <= 1;
 	else
 	if (msi_reset)
-		msi_reset <= #1 0;
+		msi_reset <= 0;
 	else
 	if (msr_read)
-		msi_reset <= #1 1; // reset bits in Modem Status Register
+		msi_reset <= 1; // reset bits in Modem Status Register
 end
 
 
@@ -474,86 +474,86 @@ end
 // Line Control Register
 always @(posedge clk or posedge wb_rst_i)
 	if (wb_rst_i)
-		lcr <= #1 8'b00000011; // 8n1 setting
+		lcr <= 8'b00000011; // 8n1 setting
 	else
 	if (wb_we_i && wb_addr_i==`UART_REG_LC)
-		lcr <= #1 wb_dat_i;
+		lcr <= wb_dat_i;
 
 // Interrupt Enable Register or UART_DL2
 always @(posedge clk or posedge wb_rst_i)
 	if (wb_rst_i)
 	begin
-		ier <= #1 4'b0000; // no interrupts after reset
-		dl[`UART_DL2] <= #1 8'b0;
+		ier <= 4'b0000; // no interrupts after reset
+		dl[`UART_DL2] <= 8'b0;
 	end
 	else
 	if (wb_we_i && wb_addr_i==`UART_REG_IE)
 		if (dlab)
 		begin
-			dl[`UART_DL2] <= #1 wb_dat_i;
+			dl[`UART_DL2] <= wb_dat_i;
 		end
 		else
-			ier <= #1 wb_dat_i[3:0]; // ier uses only 4 lsb
+			ier <= wb_dat_i[3:0]; // ier uses only 4 lsb
 
 
 // FIFO Control Register and rx_reset, tx_reset signals
 always @(posedge clk or posedge wb_rst_i)
 	if (wb_rst_i) begin
-		fcr <= #1 2'b11; 
-		rx_reset <= #1 0;
-		tx_reset <= #1 0;
+		fcr <= 2'b11;
+		rx_reset <= 0;
+		tx_reset <= 0;
 	end else
 	if (wb_we_i && wb_addr_i==`UART_REG_FC) begin
-		fcr <= #1 wb_dat_i[7:6];
-		rx_reset <= #1 wb_dat_i[1];
-		tx_reset <= #1 wb_dat_i[2];
+		fcr <= wb_dat_i[7:6];
+		rx_reset <= wb_dat_i[1];
+		tx_reset <= wb_dat_i[2];
 	end else begin
-		rx_reset <= #1 0;
-		tx_reset <= #1 0;
+		rx_reset <= 0;
+		tx_reset <= 0;
 	end
 
 // Modem Control Register
 always @(posedge clk or posedge wb_rst_i)
 	if (wb_rst_i)
-		mcr <= #1 5'b0; 
+		mcr <= 5'b0;
 	else
 	if (wb_we_i && wb_addr_i==`UART_REG_MC)
-			mcr <= #1 wb_dat_i[4:0];
+			mcr <= wb_dat_i[4:0];
 
 // Scratch register
 // Line Control Register
 always @(posedge clk or posedge wb_rst_i)
 	if (wb_rst_i)
-		scratch <= #1 0; // 8n1 setting
+		scratch <= 0; // 8n1 setting
 	else
 	if (wb_we_i && wb_addr_i==`UART_REG_SR)
-		scratch <= #1 wb_dat_i;
+		scratch <= wb_dat_i;
 
 // TX_FIFO or UART_DL1
 always @(posedge clk or posedge wb_rst_i)
 	if (wb_rst_i)
 	begin
-		dl[`UART_DL1]  <= #1 8'b0;
-		tf_push   <= #1 1'b0;
-		start_dlc <= #1 1'b0;
+		dl[`UART_DL1]  <= 8'b0;
+		tf_push   <= 1'b0;
+		start_dlc <= 1'b0;
 	end
 	else
 	if (wb_we_i && wb_addr_i==`UART_REG_TR)
 		if (dlab)
 		begin
-			dl[`UART_DL1] <= #1 wb_dat_i;
-			start_dlc <= #1 1'b1; // enable DL counter
-			tf_push <= #1 1'b0;
+			dl[`UART_DL1] <= wb_dat_i;
+			start_dlc <= 1'b1; // enable DL counter
+			tf_push <= 1'b0;
 		end
 		else
 		begin
-			tf_push   <= #1 1'b1;
-			start_dlc <= #1 1'b0;
+			tf_push   <= 1'b1;
+			start_dlc <= 1'b0;
 		end // else: !if(dlab)
 	else
 	begin
-		start_dlc <= #1 1'b0;
-		tf_push   <= #1 1'b0;
+		start_dlc <= 1'b0;
+		tf_push   <= 1'b0;
 	end // else: !if(dlab)
 
 // Receiver FIFO trigger level selection logic (asynchronous mux)
@@ -575,14 +575,14 @@ always @(posedge clk or posedge wb_rst_i
 begin
 	if (wb_rst_i)
 	  begin
-  		msr <= #1 0;
-	  	delayed_modem_signals[3:0] <= #1 0;
+  		msr <= 0;
+	  	delayed_modem_signals[3:0] <= 0;
 	  end
 	else begin
-		msr[`UART_MS_DDCD:`UART_MS_DCTS] <= #1 msi_reset ? 4'b0 :
+		msr[`UART_MS_DDCD:`UART_MS_DCTS] <= msi_reset ? 4'b0 :
 			msr[`UART_MS_DDCD:`UART_MS_DCTS] | ({dcd, ri, dsr, cts} ^ delayed_modem_signals[3:0]);
-		msr[`UART_MS_CDCD:`UART_MS_CCTS] <= #1 {dcd_c, ri_c, dsr_c, cts_c};
-		delayed_modem_signals[3:0] <= #1 {dcd, ri, dsr, cts};
+		msr[`UART_MS_CDCD:`UART_MS_CCTS] <= {dcd_c, ri_c, dsr_c, cts_c};
+		delayed_modem_signals[3:0] <= {dcd, ri, dsr, cts};
 	end
 end
 
@@ -603,113 +603,113 @@ assign lsr7 = rf_error_bit | rf_overrun;
 reg 	 lsr0_d;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr0_d <= #1 0;
-	else lsr0_d <= #1 lsr0;
+	if (wb_rst_i) lsr0_d <= 0;
+	else lsr0_d <= lsr0;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr0r <= #1 0;
-	else lsr0r <= #1 (rf_count==1 && rf_pop && !rf_push_pulse || rx_reset) ? 0 : // deassert condition
+	if (wb_rst_i) lsr0r <= 0;
+	else lsr0r <= (rf_count==1 && rf_pop && !rf_push_pulse || rx_reset) ? 0 : // deassert condition
 					  lsr0r || (lsr0 && ~lsr0_d); // set on rise of lsr0 and keep asserted until deasserted 
 
 // lsr bit 1 (receiver overrun)
 reg lsr1_d; // delayed
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr1_d <= #1 0;
-	else lsr1_d <= #1 lsr1;
+	if (wb_rst_i) lsr1_d <= 0;
+	else lsr1_d <= lsr1;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr1r <= #1 0;
-	else	lsr1r <= #1	lsr_mask ? 0 : lsr1r || (lsr1 && ~lsr1_d); // set on rise
+	if (wb_rst_i) lsr1r <= 0;
+	else	lsr1r <= lsr_mask ? 0 : lsr1r || (lsr1 && ~lsr1_d); // set on rise
 
 // lsr bit 2 (parity error)
 reg lsr2_d; // delayed
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr2_d <= #1 0;
-	else lsr2_d <= #1 lsr2;
+	if (wb_rst_i) lsr2_d <= 0;
+	else lsr2_d <= lsr2;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr2r <= #1 0;
-	else lsr2r <= #1 lsr_mask ? 0 : lsr2r || (lsr2 && ~lsr2_d); // set on rise
+	if (wb_rst_i) lsr2r <= 0;
+	else lsr2r <= lsr_mask ? 0 : lsr2r || (lsr2 && ~lsr2_d); // set on rise
 
 // lsr bit 3 (framing error)
 reg lsr3_d; // delayed
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr3_d <= #1 0;
-	else lsr3_d <= #1 lsr3;
+	if (wb_rst_i) lsr3_d <= 0;
+	else lsr3_d <= lsr3;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr3r <= #1 0;
-	else lsr3r <= #1 lsr_mask ? 0 : lsr3r || (lsr3 && ~lsr3_d); // set on rise
+	if (wb_rst_i) lsr3r <= 0;
+	else lsr3r <= lsr_mask ? 0 : lsr3r || (lsr3 && ~lsr3_d); // set on rise
 
 // lsr bit 4 (break indicator)
 reg lsr4_d; // delayed
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr4_d <= #1 0;
-	else lsr4_d <= #1 lsr4;
+	if (wb_rst_i) lsr4_d <= 0;
+	else lsr4_d <= lsr4;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr4r <= #1 0;
-	else lsr4r <= #1 lsr_mask ? 0 : lsr4r || (lsr4 && ~lsr4_d);
+	if (wb_rst_i) lsr4r <= 0;
+	else lsr4r <= lsr_mask ? 0 : lsr4r || (lsr4 && ~lsr4_d);
 
 // lsr bit 5 (transmitter fifo is empty)
 reg lsr5_d;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr5_d <= #1 1;
-	else lsr5_d <= #1 lsr5;
+	if (wb_rst_i) lsr5_d <= 1;
+	else lsr5_d <= lsr5;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr5r <= #1 1;
-	else lsr5r <= #1 (fifo_write) ? 0 :  lsr5r || (lsr5 && ~lsr5_d);
+	if (wb_rst_i) lsr5r <= 1;
+	else lsr5r <= (fifo_write) ? 0 :  lsr5r || (lsr5 && ~lsr5_d);
 
 // lsr bit 6 (transmitter empty indicator)
 reg lsr6_d;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr6_d <= #1 1;
-	else lsr6_d <= #1 lsr6;
+	if (wb_rst_i) lsr6_d <= 1;
+	else lsr6_d <= lsr6;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr6r <= #1 1;
-	else lsr6r <= #1 (fifo_write) ? 0 : lsr6r || (lsr6 && ~lsr6_d);
+	if (wb_rst_i) lsr6r <= 1;
+	else lsr6r <= (fifo_write) ? 0 : lsr6r || (lsr6 && ~lsr6_d);
 
 // lsr bit 7 (error in fifo)
 reg lsr7_d;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr7_d <= #1 0;
-	else lsr7_d <= #1 lsr7;
+	if (wb_rst_i) lsr7_d <= 0;
+	else lsr7_d <= lsr7;
 
 always @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) lsr7r <= #1 0;
-	else lsr7r <= #1 lsr_mask ? 0 : lsr7r || (lsr7 && ~lsr7_d);
+	if (wb_rst_i) lsr7r <= 0;
+	else lsr7r <= lsr_mask ? 0 : lsr7r || (lsr7 && ~lsr7_d);
 
 // Frequency divider
 always @(posedge clk or posedge wb_rst_i) 
 begin
 	if (wb_rst_i)
-		dlc <= #1 0;
+		dlc <= 0;
 	else
 		if (start_dlc | ~ (|dlc))
-  			dlc <= #1 dl - 1;               // preset counter
+  			dlc <= dl - 1;               // preset counter
 		else
-			dlc <= #1 dlc - 1;              // decrement counter
+			dlc <= dlc - 1;              // decrement counter
 end
 
 // Enable signal generation logic
 always @(posedge clk or posedge wb_rst_i)
 begin
 	if (wb_rst_i)
-		enable <= #1 1'b0;
+		enable <= 1'b0;
 	else
 		if (|dl & ~(|dlc))     // dl>0 & dlc==0
-			enable <= #1 1'b1;
+			enable <= 1'b1;
 		else
-			enable <= #1 1'b0;
+			enable <= 1'b0;
 end
 
 // Delaying THRE status for one character cycle after a character is written to an empty fifo.
@@ -729,13 +729,13 @@ always @(lcr)
 always @(posedge clk or posedge wb_rst_i)
 begin
   if (wb_rst_i)
-    block_cnt <= #1 8'd0;
+    block_cnt <= 8'd0;
   else
   if(lsr5r & fifo_write)  // THRE bit set & write to fifo occured
-    block_cnt <= #1 block_value;
+    block_cnt <= block_value;
   else
   if (enable & block_cnt != 8'b0)  // only work on enable times
-    block_cnt <= #1 block_cnt - 1;  // decrement break counter
+    block_cnt <= block_cnt - 1;  // decrement break counter
 end // always of break condition detection
 
 // Generating THRE status enable signal
@@ -760,24 +760,24 @@ reg 	 rda_int_d;
 
 // delay lines
 always  @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) rls_int_d <= #1 0;
-	else rls_int_d <= #1 rls_int;
+	if (wb_rst_i) rls_int_d <= 0;
+	else rls_int_d <= rls_int;
 
 always  @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) rda_int_d <= #1 0;
-	else rda_int_d <= #1 rda_int;
+	if (wb_rst_i) rda_int_d <= 0;
+	else rda_int_d <= rda_int;
 
 always  @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) thre_int_d <= #1 0;
-	else thre_int_d <= #1 thre_int;
+	if (wb_rst_i) thre_int_d <= 0;
+	else thre_int_d <= thre_int;
 
 always  @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) ms_int_d <= #1 0;
-	else ms_int_d <= #1 ms_int;
+	if (wb_rst_i) ms_int_d <= 0;
+	else ms_int_d <= ms_int;
 
 always  @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) ti_int_d <= #1 0;
-	else ti_int_d <= #1 ti_int;
+	if (wb_rst_i) ti_int_d <= 0;
+	else ti_int_d <= ti_int;
 
 // rise detection signals
 
@@ -802,37 +802,37 @@ reg 	ti_int_pnd;
 
 // interrupt pending flags assignments
 always  @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) rls_int_pnd <= #1 0; 
+	if (wb_rst_i) rls_int_pnd <= 0;
 	else 
-		rls_int_pnd <= #1 lsr_mask ? 0 :  						// reset condition
+		rls_int_pnd <= lsr_mask ? 0 :  						// reset condition
 							rls_int_rise ? 1 :						// latch condition
 							rls_int_pnd && ier[`UART_IE_RLS];	// default operation: remove if masked
 
 always  @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) rda_int_pnd <= #1 0; 
+	if (wb_rst_i) rda_int_pnd <= 0;
 	else 
-		rda_int_pnd <= #1 ((rf_count == {1'b0,trigger_level}) && fifo_read) ? 0 :  	// reset condition
+		rda_int_pnd <= ((rf_count == {1'b0,trigger_level}) && fifo_read) ? 0 :  	// reset condition
 							rda_int_rise ? 1 :						// latch condition
 							rda_int_pnd && ier[`UART_IE_RDA];	// default operation: remove if masked
 
 always  @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) thre_int_pnd <= #1 0; 
+	if (wb_rst_i) thre_int_pnd <= 0;
 	else 
-		thre_int_pnd <= #1 fifo_write || (iir_read & ~iir[`UART_II_IP] & iir[`UART_II_II] == `UART_II_THRE)? 0 : 
+		thre_int_pnd <= fifo_write || (iir_read & ~iir[`UART_II_IP] & iir[`UART_II_II] == `UART_II_THRE)? 0 :
 							thre_int_rise ? 1 :
 							thre_int_pnd && ier[`UART_IE_THRE];
 
 always  @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) ms_int_pnd <= #1 0; 
+	if (wb_rst_i) ms_int_pnd <= 0;
 	else 
-		ms_int_pnd <= #1 msr_read ? 0 : 
+		ms_int_pnd <= msr_read ? 0 :
 							ms_int_rise ? 1 :
 							ms_int_pnd && ier[`UART_IE_MS];
 
 always  @(posedge clk or posedge wb_rst_i)
-	if (wb_rst_i) ti_int_pnd <= #1 0; 
+	if (wb_rst_i) ti_int_pnd <= 0;
 	else 
-		ti_int_pnd <= #1 fifo_read ? 0 : 
+		ti_int_pnd <= fifo_read ? 0 :
 							ti_int_rise ? 1 :
 							ti_int_pnd && ier[`UART_IE_RDA];
 // end of pending flags
@@ -841,9 +841,9 @@ always  @(posedge clk or posedge wb_rst_
 always @(posedge clk or posedge wb_rst_i)
 begin
 	if (wb_rst_i)	
-		int_o <= #1 1'b0;
+		int_o <= 1'b0;
 	else
-		int_o <= #1 
+		int_o <=
 					rls_int_pnd		?	~lsr_mask					:
 					rda_int_pnd		? 1								:
 					ti_int_pnd		? ~fifo_read					:
@@ -857,36 +857,36 @@ end
 always @(posedge clk or posedge wb_rst_i)
 begin
 	if (wb_rst_i)
-		iir <= #1 1;
+		iir <= 1;
 	else
 	if (rls_int_pnd)  // interrupt is pending
 	begin
-		iir[`UART_II_II] <= #1 `UART_II_RLS;	// set identification register to correct value
-		iir[`UART_II_IP] <= #1 1'b0;		// and clear the IIR bit 0 (interrupt pending)
+		iir[`UART_II_II] <= `UART_II_RLS;	// set identification register to correct value
+		iir[`UART_II_IP] <= 1'b0;		// and clear the IIR bit 0 (interrupt pending)
 	end else // the sequence of conditions determines priority of interrupt identification
 	if (rda_int)
 	begin
-		iir[`UART_II_II] <= #1 `UART_II_RDA;
-		iir[`UART_II_IP] <= #1 1'b0;
+		iir[`UART_II_II] <= `UART_II_RDA;
+		iir[`UART_II_IP] <= 1'b0;
 	end
 	else if (ti_int_pnd)
 	begin
-		iir[`UART_II_II] <= #1 `UART_II_TI;
-		iir[`UART_II_IP] <= #1 1'b0;
+		iir[`UART_II_II] <= `UART_II_TI;
+		iir[`UART_II_IP] <= 1'b0;
 	end
 	else if (thre_int_pnd)
 	begin
-		iir[`UART_II_II] <= #1 `UART_II_THRE;
-		iir[`UART_II_IP] <= #1 1'b0;
+		iir[`UART_II_II] <= `UART_II_THRE;
+		iir[`UART_II_IP] <= 1'b0;
 	end
 	else if (ms_int_pnd)
 	begin
-		iir[`UART_II_II] <= #1 `UART_II_MS;
-		iir[`UART_II_IP] <= #1 1'b0;
+		iir[`UART_II_II] <= `UART_II_MS;
+		iir[`UART_II_IP] <= 1'b0;
 	end else	// no interrupt is pending
 	begin
-		iir[`UART_II_II] <= #1 0;
-		iir[`UART_II_IP] <= #1 1'b1;
+		iir[`UART_II_II] <= 0;
+		iir[`UART_II_IP] <= 1'b1;
 	end
 end
 
Index: uart16550/rtl/verilog/uart_rfifo.v
===================================================================
--- uart16550.orig/rtl/verilog/uart_rfifo.v
+++ uart16550/rtl/verilog/uart_rfifo.v
@@ -207,67 +207,67 @@ always @(posedge clk or posedge wb_rst_i
 begin
 	if (wb_rst_i)
 	begin
-		top		<= #1 0;
-		bottom		<= #1 1'b0;
-		count		<= #1 0;
-		fifo[0] <= #1 0;
-		fifo[1] <= #1 0;
-		fifo[2] <= #1 0;
-		fifo[3] <= #1 0;
-		fifo[4] <= #1 0;
-		fifo[5] <= #1 0;
-		fifo[6] <= #1 0;
-		fifo[7] <= #1 0;
-		fifo[8] <= #1 0;
-		fifo[9] <= #1 0;
-		fifo[10] <= #1 0;
-		fifo[11] <= #1 0;
-		fifo[12] <= #1 0;
-		fifo[13] <= #1 0;
-		fifo[14] <= #1 0;
-		fifo[15] <= #1 0;
+		top		<= 0;
+		bottom		<= 1'b0;
+		count		<= 0;
+		fifo[0] <= 0;
+		fifo[1] <= 0;
+		fifo[2] <= 0;
+		fifo[3] <= 0;
+		fifo[4] <= 0;
+		fifo[5] <= 0;
+		fifo[6] <= 0;
+		fifo[7] <= 0;
+		fifo[8] <= 0;
+		fifo[9] <= 0;
+		fifo[10] <= 0;
+		fifo[11] <= 0;
+		fifo[12] <= 0;
+		fifo[13] <= 0;
+		fifo[14] <= 0;
+		fifo[15] <= 0;
 	end
 	else
 	if (fifo_reset) begin
-		top		<= #1 0;
-		bottom		<= #1 1'b0;
-		count		<= #1 0;
-		fifo[0] <= #1 0;
-		fifo[1] <= #1 0;
-		fifo[2] <= #1 0;
-		fifo[3] <= #1 0;
-		fifo[4] <= #1 0;
-		fifo[5] <= #1 0;
-		fifo[6] <= #1 0;
-		fifo[7] <= #1 0;
-		fifo[8] <= #1 0;
-		fifo[9] <= #1 0;
-		fifo[10] <= #1 0;
-		fifo[11] <= #1 0;
-		fifo[12] <= #1 0;
-		fifo[13] <= #1 0;
-		fifo[14] <= #1 0;
-		fifo[15] <= #1 0;
+		top		<= 0;
+		bottom		<= 1'b0;
+		count		<= 0;
+		fifo[0] <= 0;
+		fifo[1] <= 0;
+		fifo[2] <= 0;
+		fifo[3] <= 0;
+		fifo[4] <= 0;
+		fifo[5] <= 0;
+		fifo[6] <= 0;
+		fifo[7] <= 0;
+		fifo[8] <= 0;
+		fifo[9] <= 0;
+		fifo[10] <= 0;
+		fifo[11] <= 0;
+		fifo[12] <= 0;
+		fifo[13] <= 0;
+		fifo[14] <= 0;
+		fifo[15] <= 0;
 	end
   else
 	begin
 		case ({push, pop})
 		2'b10 : if (count<fifo_depth)  // overrun condition
 			begin
-				top       <= #1 top_plus_1;
-				fifo[top] <= #1 data_in[2:0];
-				count     <= #1 count + 1'b1;
+				top       <= top_plus_1;
+				fifo[top] <= data_in[2:0];
+				count     <= count + 1'b1;
 			end
 		2'b01 : if(count>0)
 			begin
-        fifo[bottom] <= #1 0;
-				bottom   <= #1 bottom + 1'b1;
-				count	 <= #1 count - 1'b1;
+        fifo[bottom] <= 0;
+				bottom   <= bottom + 1'b1;
+				count	 <= count - 1'b1;
 			end
 		2'b11 : begin
-				bottom   <= #1 bottom + 1'b1;
-				top       <= #1 top_plus_1;
-				fifo[top] <= #1 data_in[2:0];
+				bottom   <= bottom + 1'b1;
+				top       <= top_plus_1;
+				fifo[top] <= data_in[2:0];
 		        end
     default: ;
 		endcase
@@ -277,13 +277,13 @@ end   // always
 always @(posedge clk or posedge wb_rst_i) // synchronous FIFO
 begin
   if (wb_rst_i)
-    overrun   <= #1 1'b0;
+    overrun   <= 1'b0;
   else
   if(fifo_reset | reset_status) 
-    overrun   <= #1 1'b0;
+    overrun   <= 1'b0;
   else
   if(push & ~pop & (count==fifo_depth))
-    overrun   <= #1 1'b1;
+    overrun   <= 1'b1;
 end   // always
 
 
Index: uart16550/rtl/verilog/uart_tfifo.v
===================================================================
--- uart16550.orig/rtl/verilog/uart_tfifo.v
+++ uart16550/rtl/verilog/uart_tfifo.v
@@ -196,32 +196,32 @@ always @(posedge clk or posedge wb_rst_i
 begin
 	if (wb_rst_i)
 	begin
-		top		<= #1 0;
-		bottom		<= #1 1'b0;
-		count		<= #1 0;
+		top		<= 0;
+		bottom		<= 1'b0;
+		count		<= 0;
 	end
 	else
 	if (fifo_reset) begin
-		top		<= #1 0;
-		bottom		<= #1 1'b0;
-		count		<= #1 0;
+		top		<= 0;
+		bottom		<= 1'b0;
+		count		<= 0;
 	end
   else
 	begin
 		case ({push, pop})
 		2'b10 : if (count<fifo_depth)  // overrun condition
 			begin
-				top       <= #1 top_plus_1;
-				count     <= #1 count + 1'b1;
+				top       <= top_plus_1;
+				count     <= count + 1'b1;
 			end
 		2'b01 : if(count>0)
 			begin
-				bottom   <= #1 bottom + 1'b1;
-				count	 <= #1 count - 1'b1;
+				bottom   <= bottom + 1'b1;
+				count	 <= count - 1'b1;
 			end
 		2'b11 : begin
-				bottom   <= #1 bottom + 1'b1;
-				top       <= #1 top_plus_1;
+				bottom   <= bottom + 1'b1;
+				top       <= top_plus_1;
 		        end
     default: ;
 		endcase
@@ -231,13 +231,13 @@ end   // always
 always @(posedge clk or posedge wb_rst_i) // synchronous FIFO
 begin
   if (wb_rst_i)
-    overrun   <= #1 1'b0;
+    overrun   <= 1'b0;
   else
   if(fifo_reset | reset_status) 
-    overrun   <= #1 1'b0;
+    overrun   <= 1'b0;
   else
   if(push & (count==fifo_depth))
-    overrun   <= #1 1'b1;
+    overrun   <= 1'b1;
 end   // always
 
 endmodule
Index: uart16550/rtl/verilog/uart_transmitter.v
===================================================================
--- uart16550.orig/rtl/verilog/uart_transmitter.v
+++ uart16550/rtl/verilog/uart_transmitter.v
@@ -211,14 +211,14 @@ always @(posedge clk or posedge wb_rst_i
 begin
   if (wb_rst_i)
   begin
-	tstate       <= #1 s_idle;
-	stx_o_tmp       <= #1 1'b1;
-	counter   <= #1 5'b0;
-	shift_out   <= #1 7'b0;
-	bit_out     <= #1 1'b0;
-	parity_xor  <= #1 1'b0;
-	tf_pop      <= #1 1'b0;
-	bit_counter <= #1 3'b0;
+	tstate       <= s_idle;
+	stx_o_tmp       <= 1'b1;
+	counter   <= 5'b0;
+	shift_out   <= 7'b0;
+	bit_out     <= 1'b0;
+	parity_xor  <= 1'b0;
+	tf_pop      <= 1'b0;
+	bit_counter <= 3'b0;
   end
   else
   if (enable)
@@ -226,124 +226,124 @@ begin
 	case (tstate)
 	s_idle	 :	if (~|tf_count) // if tf_count==0
 			begin
-				tstate <= #1 s_idle;
-				stx_o_tmp <= #1 1'b1;
+				tstate <= s_idle;
+				stx_o_tmp <= 1'b1;
 			end
 			else
 			begin
-				tf_pop <= #1 1'b0;
-				stx_o_tmp  <= #1 1'b1;
-				tstate  <= #1 s_pop_byte;
+				tf_pop <= 1'b0;
+				stx_o_tmp  <= 1'b1;
+				tstate  <= s_pop_byte;
 			end
 	s_pop_byte :	begin
-				tf_pop <= #1 1'b1;
+				tf_pop <= 1'b1;
 				case (lcr[/*`UART_LC_BITS*/1:0])  // number of bits in a word
 				2'b00 : begin
-					bit_counter <= #1 3'b100;
-					parity_xor  <= #1 ^tf_data_out[4:0];
+					bit_counter <= 3'b100;
+					parity_xor  <= ^tf_data_out[4:0];
 				     end
 				2'b01 : begin
-					bit_counter <= #1 3'b101;
-					parity_xor  <= #1 ^tf_data_out[5:0];
+					bit_counter <= 3'b101;
+					parity_xor  <= ^tf_data_out[5:0];
 				     end
 				2'b10 : begin
-					bit_counter <= #1 3'b110;
-					parity_xor  <= #1 ^tf_data_out[6:0];
+					bit_counter <= 3'b110;
+					parity_xor  <= ^tf_data_out[6:0];
 				     end
 				2'b11 : begin
-					bit_counter <= #1 3'b111;
-					parity_xor  <= #1 ^tf_data_out[7:0];
+					bit_counter <= 3'b111;
+					parity_xor  <= ^tf_data_out[7:0];
 				     end
 				endcase
-				{shift_out[6:0], bit_out} <= #1 tf_data_out;
-				tstate <= #1 s_send_start;
+				{shift_out[6:0], bit_out} <= tf_data_out;
+				tstate <= s_send_start;
 			end
 	s_send_start :	begin
-				tf_pop <= #1 1'b0;
+				tf_pop <= 1'b0;
 				if (~|counter)
-					counter <= #1 5'b01111;
+					counter <= 5'b01111;
 				else
 				if (counter == 5'b00001)
 				begin
-					counter <= #1 0;
-					tstate <= #1 s_send_byte;
+					counter <= 0;
+					tstate <= s_send_byte;
 				end
 				else
-					counter <= #1 counter - 1'b1;
-				stx_o_tmp <= #1 1'b0;
+					counter <= counter - 1'b1;
+				stx_o_tmp <= 1'b0;
 			end
 	s_send_byte :	begin
 				if (~|counter)
-					counter <= #1 5'b01111;
+					counter <= 5'b01111;
 				else
 				if (counter == 5'b00001)
 				begin
 					if (bit_counter > 3'b0)
 					begin
-						bit_counter <= #1 bit_counter - 1'b1;
-						{shift_out[5:0],bit_out  } <= #1 {shift_out[6:1], shift_out[0]};
-						tstate <= #1 s_send_byte;
+						bit_counter <= bit_counter - 1'b1;
+						{shift_out[5:0],bit_out  } <= {shift_out[6:1], shift_out[0]};
+						tstate <= s_send_byte;
 					end
 					else   // end of byte
 					if (~lcr[`UART_LC_PE])
 					begin
-						tstate <= #1 s_send_stop;
+						tstate <= s_send_stop;
 					end
 					else
 					begin
 						case ({lcr[`UART_LC_EP],lcr[`UART_LC_SP]})
-						2'b00:	bit_out <= #1 ~parity_xor;
-						2'b01:	bit_out <= #1 1'b1;
-						2'b10:	bit_out <= #1 parity_xor;
-						2'b11:	bit_out <= #1 1'b0;
+						2'b00:	bit_out <= ~parity_xor;
+						2'b01:	bit_out <= 1'b1;
+						2'b10:	bit_out <= parity_xor;
+						2'b11:	bit_out <= 1'b0;
 						endcase
-						tstate <= #1 s_send_parity;
+						tstate <= s_send_parity;
 					end
-					counter <= #1 0;
+					counter <= 0;
 				end
 				else
-					counter <= #1 counter - 1'b1;
-				stx_o_tmp <= #1 bit_out; // set output pin
+					counter <= counter - 1'b1;
+				stx_o_tmp <= bit_out; // set output pin
 			end
 	s_send_parity :	begin
 				if (~|counter)
-					counter <= #1 5'b01111;
+					counter <= 5'b01111;
 				else
 				if (counter == 5'b00001)
 				begin
-					counter <= #1 4'b0;
-					tstate <= #1 s_send_stop;
+					counter <= 4'b0;
+					tstate <= s_send_stop;
 				end
 				else
-					counter <= #1 counter - 1'b1;
-				stx_o_tmp <= #1 bit_out;
+					counter <= counter - 1'b1;
+				stx_o_tmp <= bit_out;
 			end
 	s_send_stop :  begin
 				if (~|counter)
 				  begin
 						casex ({lcr[`UART_LC_SB],lcr[`UART_LC_BITS]})
-  						3'b0xx:	  counter <= #1 5'b01101;     // 1 stop bit ok igor
-  						3'b100:	  counter <= #1 5'b10101;     // 1.5 stop bit
-  						default:	  counter <= #1 5'b11101;     // 2 stop bits
+  						3'b0xx:	  counter <= 5'b01101;     // 1 stop bit ok igor
+  						3'b100:	  counter <= 5'b10101;     // 1.5 stop bit
+  						default:	  counter <= 5'b11101;     // 2 stop bits
 						endcase
 					end
 				else
 				if (counter == 5'b00001)
 				begin
-					counter <= #1 0;
-					tstate <= #1 s_idle;
+					counter <= 0;
+					tstate <= s_idle;
 				end
 				else
-					counter <= #1 counter - 1'b1;
-				stx_o_tmp <= #1 1'b1;
+					counter <= counter - 1'b1;
+				stx_o_tmp <= 1'b1;
 			end
 
 		default : // should never get here
-			tstate <= #1 s_idle;
+			tstate <= s_idle;
 	endcase
   end // end if enable
   else
-    tf_pop <= #1 1'b0;  // tf_pop must be 1 cycle width
+    tf_pop <= 1'b0;  // tf_pop must be 1 cycle width
 end // transmitter logic
 
 assign stx_pad_o = lcr[`UART_LC_BC] ? 1'b0 : stx_o_tmp;    // Break condition
Index: uart16550/rtl/verilog/uart_wb.v
===================================================================
--- uart16550.orig/rtl/verilog/uart_wb.v
+++ uart16550/rtl/verilog/uart_wb.v
@@ -194,30 +194,30 @@ reg 			 wre ;// timing control signal fo
 reg [1:0] 	 wbstate;
 always  @(posedge clk or posedge wb_rst_i)
 	if (wb_rst_i) begin
-		wb_ack_o <= #1 1'b0;
-		wbstate <= #1 0;
-		wre <= #1 1'b1;
+		wb_ack_o <= 1'b0;
+		wbstate <= 0;
+		wre <= 1'b1;
 	end else
 		case (wbstate)
 			0: begin
 				if (wb_stb_is & wb_cyc_is) begin
-					wre <= #1 0;
-					wbstate <= #1 1;
-					wb_ack_o <= #1 1;
+					wre <= 0;
+					wbstate <= 1;
+					wb_ack_o <= 1;
 				end else begin
-					wre <= #1 1;
-					wb_ack_o <= #1 0;
+					wre <= 1;
+					wb_ack_o <= 0;
 				end
 			end
 			1: begin
-			   wb_ack_o <= #1 0;
-				wbstate <= #1 2;
-				wre <= #1 0;
+			   wb_ack_o <= 0;
+				wbstate <= 2;
+				wre <= 0;
 			end
 			2,3: begin
-				wb_ack_o <= #1 0;
-				wbstate <= #1 0;
-				wre <= #1 0;
+				wb_ack_o <= 0;
+				wbstate <= 0;
+				wre <= 0;
 			end
 		endcase
 
@@ -227,27 +227,27 @@ assign re_o = ~wb_we_is & wb_stb_is & wb
 // Sample input signals
 always  @(posedge clk or posedge wb_rst_i)
 	if (wb_rst_i) begin
-		wb_adr_is <= #1 0;
-		wb_we_is <= #1 0;
-		wb_cyc_is <= #1 0;
-		wb_stb_is <= #1 0;
-		wb_dat_is <= #1 0;
-		wb_sel_is <= #1 0;
+		wb_adr_is <= 0;
+		wb_we_is <= 0;
+		wb_cyc_is <= 0;
+		wb_stb_is <= 0;
+		wb_dat_is <= 0;
+		wb_sel_is <= 0;
 	end else begin
-		wb_adr_is <= #1 wb_adr_i;
-		wb_we_is <= #1 wb_we_i;
-		wb_cyc_is <= #1 wb_cyc_i;
-		wb_stb_is <= #1 wb_stb_i;
-		wb_dat_is <= #1 wb_dat_i;
-		wb_sel_is <= #1 wb_sel_i;
+		wb_adr_is <= wb_adr_i;
+		wb_we_is <= wb_we_i;
+		wb_cyc_is <= wb_cyc_i;
+		wb_stb_is <= wb_stb_i;
+		wb_dat_is <= wb_dat_i;
+		wb_sel_is <= wb_sel_i;
 	end
 
 `ifdef DATA_BUS_WIDTH_8 // 8-bit data bus
 always @(posedge clk or posedge wb_rst_i)
 	if (wb_rst_i)
-		wb_dat_o <= #1 0;
+		wb_dat_o <= 0;
 	else
-		wb_dat_o <= #1 wb_dat8_o;
+		wb_dat_o <= wb_dat8_o;
 
 always @(wb_dat_is)
 	wb_dat8_i = wb_dat_is;
@@ -258,15 +258,15 @@ assign wb_adr_int = wb_adr_is;
 // put output to the correct byte in 32 bits using select line
 always @(posedge clk or posedge wb_rst_i)
 	if (wb_rst_i)
-		wb_dat_o <= #1 0;
+		wb_dat_o <= 0;
 	else if (re_o)
 		case (wb_sel_is)
-			4'b0001: wb_dat_o <= #1 {24'b0, wb_dat8_o};
-			4'b0010: wb_dat_o <= #1 {16'b0, wb_dat8_o, 8'b0};
-			4'b0100: wb_dat_o <= #1 {8'b0, wb_dat8_o, 16'b0};
-			4'b1000: wb_dat_o <= #1 {wb_dat8_o, 24'b0};
-			4'b1111: wb_dat_o <= #1 wb_dat32_o; // debug interface output
- 			default: wb_dat_o <= #1 0;
+			4'b0001: wb_dat_o <= {24'b0, wb_dat8_o};
+			4'b0010: wb_dat_o <= {16'b0, wb_dat8_o, 8'b0};
+			4'b0100: wb_dat_o <= {8'b0, wb_dat8_o, 16'b0};
+			4'b1000: wb_dat_o <= {wb_dat8_o, 24'b0};
+			4'b1111: wb_dat_o <= wb_dat32_o; // debug interface output
+ 			default: wb_dat_o <= 0;
 		endcase // case(wb_sel_i)
 
 reg [1:0] wb_adr_int_lsb;
